<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md__r_e_a_d_m_e-sphinx" kind="page">
    <compoundname>md_README-sphinx</compoundname>
    <title>README – the RoboCLuedo Project – ROUND 2</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><emphasis>Francesco Ganci</emphasis> - S4143910 - A.A.2021/2022</para>
<para><hruler/>
</para>
<para><programlisting filename=".toctree"><codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">caption:<sp/>Contents</highlight></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">./README-sphinx.md</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
<para><image type="html" name="cluedexterbox.jpg" inline="yes"></image>
</para>
<para><hruler/>
</para>
<sect1 id="md__r_e_a_d_m_e-sphinx_1autotoc_md154">
<title>What you can find in this readme</title>
<para>This readme goes through the design ideas under the project.</para>
<para><itemizedlist>
<listitem><para>expected behaviour of the project</para>
</listitem><listitem><para>main design ideas</para>
</listitem><listitem><para>Software Architecture components overview</para>
</listitem><listitem><para>Software Architecture communication protocols overview</para>
</listitem></itemizedlist>
</para>
<para>The parts of the architecture are deeply detailed inside this documentation, see the <emphasis>Packages Documentation</emphasis> section.</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e-sphinx_1autotoc_md155">
<title>Introduction – RCL#2</title>
<para>The main aim of the <ulink url="https://github.com/programmatoroSeduto/ExperimentalRoboticsLab-Assignment-2">RCL#2</ulink> project is to implement the control system of a robot playing a game freely inspired to the classic board game <emphasis>CLuedo</emphasis>.</para>
<para>In particular, the system controls a 4-wheeled robot with one manipulator. The robot explores the surroundings in search of any clue that could be determinant to <emphasis>understand</emphasis> who is the killer, what is the weapon of the murder, and where the poor Dr. Black has been killed. The robot uses a OWL-based system to reason about the clues, collecting, putting together, and finding a one possible solution. The arbiter of the game is th so-called <emphasis>Oracle</emphasis>, which knows the solution, and can be interrogated when the robot is ready to announce the murderer.</para>
<para>(But, differently from the real game, the robot can propose as many solution as it wants, without loosing the game after a wrong proposal...)</para>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md156">
<title>Technical Goals – RCL#2</title>
<para>First of all, the main aim is to create a better architecture than in the previous <ulink url="https://github.com/programmatoroSeduto/ExperimentalRoboticsLab-Assignment-1.git">RCL#1</ulink> project, which is not so flexible (mainly due to unclear requirements, concerning in particular the interface of the Oracle which clearly must be external to the project): this did lead to twrow away many parts of the preivous version of the project, except for the aRMOR part which is reusable almost completely, with a little of message updates. In particular, the project should represent a basis for the third iteration of the project: the strategy is to implement an architecture which can be flexible enough to allow the re-usage of almost all the parts, with very little changes.</para>
<para>Moreover, as in the other projects, a great care has been given to <emphasis>the metodology of work</emphasis>: not only writing the code, but also using and developing its documentation during the work. A big effort has been made as well, in documenting about the technologies involved in the implementation of this project, trying to find a way to make it work which could work also on other platforms as much as possible. Finally, the project comes with a rich <emphasis>module testing</emphasis> allowing to ensure the functioning of each module, either single or in combination with other elements of the architecture. See the official project documentation for further informations.</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md157">
<title>Features – RCL#2</title>
<para><itemizedlist>
<listitem><para>manipulator control using MoveIt with well-known poses</para>
</listitem><listitem><para>navigation using a multi-layer implementation (to gain flexibility for later updates)</para>
</listitem><listitem><para>usage of a OWL-based ontology for elaborating CLuedo hints and combining them into hypotheses and then possible solutions of the mystery</para>
</listitem><listitem><para>usage of a double-layered planning strategy involving a simple state-machine at high level and ROSPlan for the low-level planning<itemizedlist>
<listitem><para>the project introduces a <emphasis>policy</emphasis> made of <emphasis>landmarks</emphasis>: the main idea is that the problem can be solved by &quot;steps&quot; (the so-called landmarks) that are macro-steps to be expanded by ROSPlan in sequences of actions to apply, depending on the situation</para>
</listitem><listitem><para>this choice allows to have a part of the architecture not taking into account the details of the PDDL model, making an <emphasis>abstraction</emphasis> upon the real structure of the PDDL</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e-sphinx_1autotoc_md158">
<title>Expected Behaviour – RCL#2</title>
<para>Here&apos;s how the robot should behave, just as a short overview of how the RCL#2 project works.</para>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md159">
<title>ERL#2 Environment</title>
<para>Our RoboCLuedo starts in the middle of a little square room (6m per 6m). Here&apos;s how the environment appears on Gazebo:</para>
<para><image type="html" name="env-gz.png" inline="yes"></image>
</para>
<para>Abit outside the arena, there are four markers, that in this simulation are the points where the robot can find the hints. When the robot touches a marker, it receives a hint that it can store and elaborate inside its ontology. Here&apos;s the environment as seen in RViz, showing the positions of the markers:</para>
<para><image type="html" name="env-rv.png" inline="yes"></image>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md160">
<title>Expected Behaviour</title>
<para>During the searching phase, there&apos;s a common sequence of operations repeated:</para>
<para><itemizedlist>
<listitem><para>go in front o a marker</para>
</listitem><listitem><para>&quot;touch&quot; the marker (it triggers the oracle to send a hint)</para>
</listitem><listitem><para>put back the robot in its home position</para>
</listitem></itemizedlist>
</para>
<para>then the robot selects another waypoint, and the cycle restarts. When the robot succeeded in obtaining at least one CONSISTENT hypothesis, the robot goes at the center of the arena to propose its solution to the Oracle. Due to the fact that the Oracle could return a corrupted hint, or also a repeated one, the robotcould take a lot of time to formulate a acceptable hypothesis.</para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e-sphinx_1autotoc_md161">
<title>SW Arch – Components</title>
<para>The project is a rich composition of many packages, resulting in a complex, heavy centralized architecture. It behaves as a classical hyerarchical architecture: sense, then plan, then act. <emphasis>So far, the &apos;sense&apos; part is simulated by the Oracle sending the hints</emphasis>: in afuture development, the robot should get the hints from the environment using a vision system.</para>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md162">
<title>highlights of the architecture</title>
<para>Here are the concept I used during each phase of the job:</para>
<para><itemizedlist>
<listitem><para><bold>separation</bold> : Great care has been given in <emphasis>guaranteeing the neat separation between components</emphasis></para>
<para>for instance, the RCL ROSPlan package doesn&apos;t interact directly with the motion controllers: it exposes a client to implement instead, which is called each time a ROSPlan action needs to perform the navigation. It requires a <emphasis>bridge node</emphasis>, that is a delegate between the ROSPlan framework and the real navigation system.</para>
</listitem><listitem><para><bold>abstraction</bold> : the interfaces provided by each package <emphasis>aims at hiding the implementation details</emphasis>, enhancing a standard, intuitive way to use each package</para>
<para>in particular, most of them provide a number of <emphasis>directives</emphasis>, i.e. spcecific operations an external node expects to be implemented in a way that the node don&apos;t want to know. The aRMOR package along with this project is a good example of this.</para>
</listitem><listitem><para><bold>flexibility and adaptability</bold> : the neat separation between packages, alongside with the abstraction, lets the architecture to be more flexible and easily updatable.</para>
</listitem><listitem><para><bold>module testing</bold> : it is a fundamental concept traversing all the lifecycle of this project since RCL#1</para>
<para>The project contains a rich module testing section, allowing the developer to not wasting time in looking for bugs in a very complex, demanding architecture. Each package can be tested independently, and most of the times with just a bash script. Sometimes also some code has been provided in order to test the project.</para>
<para><emphasis>Developing a rich debug system is a necessity</emphasis> with such a large project. You cannot go on if you can&apos;t be sure at 100% that the components &quot;at the bottom&quot; work as expected. It helped me during the development phase hundreds of times, even revealing bugs whicc was very difficult to spot simply running the proejct.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md163">
<title>Components – simplified schema</title>
<para>It highlights the centralized structure of the architecture. Each component here corresponds to a package used by the project.</para>
<para>The mission manager contains the bridges above-mentioned (there are bridges for both the navigation and the manipulation), as well as the <emphasis>main node</emphasis> providing a high-layer planning by means of landmarks and aRMOR operations.</para>
<para><programlisting filename=".uml"><codeline><highlight class="normal">@startuml</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>INFOS</highlight></codeline>
<codeline><highlight class="normal">title<sp/>Project<sp/>Architecture<sp/>simplified</highlight></codeline>
<codeline><highlight class="normal">skinparam<sp/>Padding<sp/>10</highlight></codeline>
<codeline><highlight class="normal">allow_mixing</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>COMPONENTS</highlight></codeline>
<codeline><highlight class="normal">database<sp/>&quot;aRMOR&quot;<sp/>as<sp/>ARMOR</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;MoveIt!&quot;<sp/>as<sp/>MOVEIT</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;erl2<sp/>Oracle&quot;<sp/>as<sp/>ORACLE</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;ROSPlan&quot;<sp/>as<sp/>ROSPLAN</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">component<sp/>&quot;RCL<sp/>environment&quot;<sp/>as<sp/>ENVIRONMENT</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">package<sp/>RCL<sp/>{</highlight></codeline>
<codeline><highlight class="normal">node<sp/>&quot;RCL<sp/>mission<sp/>manager&quot;<sp/>as<sp/>MISSION_MANAGER</highlight></codeline>
<codeline><highlight class="normal">&apos;<sp/>component<sp/>&quot;RCL<sp/>Vision&quot;<sp/>as<sp/>VISION</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;RCL<sp/>aRMOR<sp/>interface&quot;<sp/>as<sp/>RCL_ARMOR</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;RCL<sp/>ROSPlan&quot;<sp/>as<sp/>RCL_ROSPLAN</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;RCL<sp/>Movement<sp/>Controller&quot;<sp/>as<sp/>MOVEMENT</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>CONNECTIONS</highlight></codeline>
<codeline><highlight class="normal">ENVIRONMENT<sp/>&lt;--&gt;<sp/>MOVEIT</highlight></codeline>
<codeline><highlight class="normal">MOVEIT<sp/>&lt;--&gt;<sp/>MOVEMENT</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ENVIRONMENT<sp/>&lt;--&gt;<sp/>MOVEMENT</highlight></codeline>
<codeline><highlight class="normal">MOVEMENT<sp/>&lt;--&gt;<sp/>MISSION_MANAGER</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MISSION_MANAGER<sp/>&lt;--&gt;<sp/>RCL_ROSPLAN</highlight></codeline>
<codeline><highlight class="normal">ROSPLAN<sp/>&lt;-up-&gt;<sp/>RCL_ROSPLAN</highlight></codeline>
<codeline><highlight class="normal">MISSION_MANAGER<sp/>&lt;--&gt;<sp/>RCL_ARMOR</highlight></codeline>
<codeline><highlight class="normal">ARMOR<sp/>&lt;-right-&gt;<sp/>RCL_ARMOR</highlight></codeline>
<codeline><highlight class="normal">&apos;<sp/>MISSION_MANAGER<sp/>&lt;--&gt;<sp/>VISION</highlight></codeline>
<codeline><highlight class="normal">&apos;<sp/>VISION<sp/>&lt;--&gt;<sp/>ORACLE</highlight></codeline>
<codeline><highlight class="normal">MISSION_MANAGER<sp/>-right-<sp/>ORACLE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@enduml</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md165">
<title>Components – extended schema</title>
<para>This schema wants to give an idea of how much the architecture of the project is extended. Inside it there are pointed out many ideas inside RCL#2:</para>
<para><itemizedlist>
<listitem><para>the ROSPlan side is a sort of mikrokosmos of components. The system uses the idea of <emphasis>landmarks</emphasis>, implementing the &quot;low level planning system&quot;. See the official documentation, and in particular the design of the PDDL, for further details about such a planning policy.</para>
<para>The problem solution strategy is divided into three &quot;steps&quot;, called <emphasis>landmakrs</emphasis> in the terminology of the project:<itemizedlist>
<listitem><para><bold>REPLAN</bold> : tidy the rosplan kb up, maing it ready for a new iteration of the strategy</para>
</listitem><listitem><para><bold>COLLECT</bold> : move the robot in the environment, <emphasis>using a topological localisation</emphasis> integrated with the ROSPlan PDDL model</para>
</listitem><listitem><para><bold>SOLVE</bold> : the final step, introduce the &quot;assumed&quot; solution of the case and check it; the robot moves towards the center before introducing the solution</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>the movement controller package implements both the navigation system and the manipulation system.</para>
<para>the navigation system is divided into many layers (hierarchical architecture inside): the behavioural section, containing<itemizedlist>
<listitem><para>the <emphasis>elementary behaviours</emphasis> directly influencing the motion of the robot,</para>
</listitem><listitem><para>combined into <emphasis>composite behaviours</emphasis> which group the elementary behaviours to make more structured motion strategies</para>
</listitem><listitem><para>and the <emphasis>motion controllers</emphasis>, components of the navigation manager (implemented as classes inside that node) providing a &quot;cozy&quot; abstraction for the navigation system: a external node sees onl a simple interface, without having the need to deal with the details of the implementation of the navigation system.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para>Here&apos;s the diagram:</para>
<para><programlisting filename=".uml"><codeline><highlight class="normal">@startuml</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>INFOS</highlight></codeline>
<codeline><highlight class="normal">title<sp/>Project<sp/>Architecture<sp/>-<sp/>extended</highlight></codeline>
<codeline><highlight class="normal">left<sp/>to<sp/>right<sp/>direction</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>COMPONENTS</highlight></codeline>
<codeline><highlight class="normal">package<sp/>armor{</highlight></codeline>
<codeline><highlight class="normal">database<sp/>&quot;aRMOR&quot;<sp/>as<sp/>ARMOR</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;RCL<sp/>aRMOR<sp/>interface&quot;<sp/>as<sp/>RCL_ARMOR</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">package<sp/>&quot;RCL<sp/>Mission<sp/>Manager&quot;{</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;RCL<sp/>mission<sp/>manager&quot;<sp/>as<sp/>MISSION_MANAGER</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;RCL<sp/>manipulation<sp/>unit&quot;<sp/>as<sp/>MANIP_UNIT</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;RCL<sp/>navigation<sp/>unit&quot;<sp/>as<sp/>NAV_UNIT</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">package<sp/>&quot;RCL<sp/>ROSPlan&quot;<sp/>{</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;ROSPlan<sp/>pipeline<sp/>manager&quot;<sp/>as<sp/>ROSPLAN</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;RCL<sp/>kb_tools&quot;<sp/>as<sp/>RCL_KBTOOLS</highlight></codeline>
<codeline><highlight class="normal">database<sp/>&quot;ROSPlan<sp/>kb&quot;<sp/>as<sp/>ROSPLANKB</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;ROSPlan<sp/>components&quot;<sp/>as<sp/>ROSPLAN_COMPONENTS</highlight></codeline>
<codeline><highlight class="normal">file<sp/>&quot;domain&quot;<sp/>as<sp/>DOMAIN</highlight></codeline>
<codeline><highlight class="normal">file<sp/>&quot;problem&quot;<sp/>as<sp/>PROBLEM</highlight></codeline>
<codeline><highlight class="normal">node<sp/>&quot;feedback<sp/>manager&quot;<sp/>as<sp/>FEEDBACK</highlight></codeline>
<codeline><highlight class="normal">package<sp/>&quot;RCL<sp/>ROSPlan<sp/>Actions&quot;<sp/>as<sp/>ROSPLAN_ACTIONS<sp/>{</highlight></codeline>
<codeline><highlight class="normal">node<sp/>REPLAN</highlight></codeline>
<codeline><highlight class="normal">node<sp/>SOLVE</highlight></codeline>
<codeline><highlight class="normal">node<sp/>COLLECT</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">package<sp/>&quot;erl2&quot;{</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;erl2<sp/>Oracle&quot;<sp/>as<sp/>ORACLE</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">package<sp/>&quot;Simulated<sp/>Environment&quot;<sp/>as<sp/>ENVIRONMENT<sp/>{</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;RCL<sp/>robot&quot;</highlight></codeline>
<codeline><highlight class="normal">node<sp/>&quot;Gazebo&quot;</highlight></codeline>
<codeline><highlight class="normal">node<sp/>&quot;RViz&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">package<sp/>moveit<sp/>{</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;MoveIt!&quot;<sp/>as<sp/>MOVEIT</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">package<sp/>&quot;RCL<sp/>Movement<sp/>Controller&quot;<sp/>{</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;RCL<sp/>navigation<sp/>manager&quot;<sp/>as<sp/>MOVEMENT</highlight></codeline>
<codeline><highlight class="normal">component<sp/>&quot;RCL<sp/>manipulation<sp/>controller&quot;<sp/>as<sp/>MANIPULATION</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">package<sp/>behaviours<sp/>{</highlight></codeline>
<codeline><highlight class="normal">node<sp/>&quot;bug_m&quot;</highlight></codeline>
<codeline><highlight class="normal">node<sp/>&quot;head_orientation&quot;</highlight></codeline>
<codeline><highlight class="normal">node<sp/>&quot;go_to_point&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>CONNECTIONS</highlight></codeline>
<codeline><highlight class="normal">ENVIRONMENT<sp/>--<sp/>MOVEIT</highlight></codeline>
<codeline><highlight class="normal">MOVEIT<sp/>--<sp/>MANIPULATION</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ENVIRONMENT<sp/>--<sp/>MOVEMENT</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MANIPULATION<sp/>--<sp/>MANIP_UNIT</highlight></codeline>
<codeline><highlight class="normal">MOVEMENT<sp/>--<sp/>NAV_UNIT</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MISSION_MANAGER<sp/>--<sp/>RCL_ARMOR</highlight></codeline>
<codeline><highlight class="normal">RCL_ARMOR<sp/>&lt;--&gt;<sp/>ARMOR</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MISSION_MANAGER<sp/>--<sp/>ROSPLAN</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MISSION_MANAGER<sp/>--<sp/>ORACLE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PROBLEM<sp/>--<sp/>ROSPLANKB</highlight></codeline>
<codeline><highlight class="normal">DOMAIN<sp/>--<sp/>ROSPLANKB</highlight></codeline>
<codeline><highlight class="normal">ROSPLANKB<sp/>--<sp/>ROSPLAN_COMPONENTS</highlight></codeline>
<codeline><highlight class="normal">ROSPLAN_COMPONENTS<sp/>--<sp/>ROSPLAN<sp/></highlight></codeline>
<codeline><highlight class="normal">ROSPLAN_COMPONENTS<sp/>--ROSPLAN_ACTIONS</highlight></codeline>
<codeline><highlight class="normal">ROSPLAN_ACTIONS<sp/>--<sp/>FEEDBACK</highlight></codeline>
<codeline><highlight class="normal">FEEDBACK<sp/>--<sp/>ROSPLAN</highlight></codeline>
<codeline><highlight class="normal">ROSPLANKB<sp/>--<sp/>RCL_KBTOOLS</highlight></codeline>
<codeline><highlight class="normal">RCL_KBTOOLS<sp/>--<sp/>ROSPLAN</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ROSPLAN_ACTIONS<sp/>--<sp/>NAV_UNIT</highlight></codeline>
<codeline><highlight class="normal">ROSPLAN_ACTIONS<sp/>--<sp/>MANIP_UNIT</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@enduml</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e-sphinx_1autotoc_md167">
<title>SW Arch – communication protocols overview</title>
<para>Here are the temporal diagrams of the project, describing just the essential steps performed in communicating between packages</para>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md168">
<title>Foreword – diagrams conventions</title>
<para><itemizedlist>
<listitem><para>the <emphasis>package temporal diagram</emphasis> represents how different independe packages work together</para>
</listitem><listitem><para>the <emphasis>node temporal diagram</emphasis> is more specific and goes deeper into how the nodes communicate each other</para>
</listitem><listitem><para>the square note is used for exposing scenarios and hypotheses</para>
</listitem><listitem><para>the rhomboid annotation underlines an operation inside the node or the package</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md169">
<title>navigation using bug_m (RCL#2)</title>
<para><bold>package temporal diagram</bold>. The RCL#2 uses simple behaviours in order to perform the navigation. The package <emphasis>robocluedo_mission_manager</emphasis> offers delegates to enable the communicaton between two different packages: RCL ROSPlan, and the movement controller package.</para>
<para><programlisting filename=".uml"><codeline><highlight class="normal">@startuml</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">title<sp/>bug_m<sp/>navigation<sp/>-<sp/>package<sp/>temporal<sp/>diagram</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>ENTITIES<sp/></highlight></codeline>
<codeline><highlight class="normal">collections<sp/>ROSPLAN</highlight></codeline>
<codeline><highlight class="normal">collections<sp/>MISSION</highlight></codeline>
<codeline><highlight class="normal">collections<sp/>MOVEMENT</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>SEQUENCE</highlight></codeline>
<codeline><highlight class="normal">&apos;<sp/>==<sp/>section<sp/>==</highlight></codeline>
<codeline><highlight class="normal">&apos;<sp/>...</highlight></codeline>
<codeline><highlight class="normal">==<sp/>First<sp/>setup<sp/>(first<sp/>request)<sp/>==</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MISSION<sp/>-&gt;<sp/>MOVEMENT<sp/>:<sp/>SET<sp/>controller<sp/>&lt;b&gt;ID=0&lt;/b&gt;</highlight></codeline>
<codeline><highlight class="normal">MISSION<sp/>&lt;-<sp/>MOVEMENT<sp/>:<sp/>&lt;i&gt;success&lt;/i&gt;</highlight></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>MISSION:<sp/>waiting<sp/>for<sp/>markers</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">==<sp/>Movement<sp/>==</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ROSPLAN<sp/>-&gt;<sp/>MISSION<sp/>:<sp/>request<sp/>from<sp/>ROSPlan<sp/>action</highlight></codeline>
<codeline><highlight class="normal">MISSION<sp/>-&gt;<sp/>MOVEMENT<sp/>:<sp/>navigation<sp/>request</highlight></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>MOVEMENT<sp/></highlight></codeline>
<codeline><highlight class="normal">performing<sp/>navigation<sp/></highlight></codeline>
<codeline><highlight class="normal">with<sp/>BUG_M<sp/>behaviour</highlight></codeline>
<codeline><highlight class="normal">end<sp/>hnote</highlight></codeline>
<codeline><highlight class="normal">MISSION<sp/>&lt;-<sp/>MOVEMENT<sp/>:<sp/>target<sp/>reached</highlight></codeline>
<codeline><highlight class="normal">ROSPLAN<sp/>&lt;-<sp/>MISSION<sp/>:<sp/>navigation<sp/>ended</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@enduml</highlight></codeline>
</programlisting></para>
<para><bold>node temporal diagram</bold>. The navigation is divided into many layers: the delegate (NAVIGATION_UNIT) inside the <emphasis>robocluedo_mission_manager</emphasis> package, the manager (NAVIGATION_MANAGER), the controller (NAVIGATION_CONTROLLER), the composite behaviour (BUGM_NAV) and the elementary behaviours (in this case HEAD_ORIENTATION and GOTO_POINT).</para>
<para>The robot moves backwards very slowly, trying to gain space for then performing the rotation. Successively, it rotates orienting its head towards the target. The trasvel proceeds along a straight line from the starting point to the target one. And finally, the robot orients itself to reach the final pose.</para>
<para><programlisting filename=".uml"><codeline><highlight class="normal">@startuml</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">title<sp/>bug_m<sp/>navigation<sp/>-<sp/>node<sp/>temporal<sp/>diagram</highlight></codeline>
<codeline><highlight class="normal">&apos;<sp/>header<sp/>...</highlight></codeline>
<codeline><highlight class="normal">&apos;<sp/>footer<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>ENTITIES<sp/></highlight></codeline>
<codeline><highlight class="normal">participant<sp/>MOVE_TO<sp/>order<sp/>0</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>NAVIGATION_UNIT<sp/>order<sp/>1</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>NAVIGATION_MANAGER<sp/>order<sp/>2</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>NAVIGATION_CONTROLLER<sp/>order<sp/>3</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>BUGM_NAV<sp/>order<sp/>5</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>HEAD_ORIENT<sp/>order<sp/>6</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>GOTO_POINT<sp/>order<sp/>5</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>SEQUENCE</highlight></codeline>
<codeline><highlight class="normal">&apos;<sp/>==<sp/>section<sp/>==</highlight></codeline>
<codeline><highlight class="normal">&apos;<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">==<sp/>request<sp/>==</highlight></codeline>
<codeline><highlight class="normal">MOVE_TO<sp/>-&gt;<sp/>NAVIGATION_UNIT<sp/>:<sp/>using<sp/>RCL<sp/>ROSPlan<sp/>interface</highlight></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>NAVIGATION_UNIT<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>waiting<sp/>for<sp/>markers</highlight></codeline>
<codeline><highlight class="normal">end<sp/>hnote</highlight></codeline>
<codeline><highlight class="normal">NAVIGATION_UNIT<sp/>-&gt;<sp/>NAVIGATION_MANAGER<sp/>:<sp/>using<sp/>RCL<sp/>navigation<sp/>req</highlight></codeline>
<codeline><highlight class="normal">note<sp/>over<sp/>NAVIGATION_MANAGER</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>let&apos;s<sp/>assume<sp/>a<sp/>controller<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>has<sp/>been<sp/>activated<sp/>before...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>otherwise,<sp/>the<sp/>service<sp/>returns<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>immediately</highlight></codeline>
<codeline><highlight class="normal">end<sp/>note</highlight></codeline>
<codeline><highlight class="normal">NAVIGATION_MANAGER<sp/>--&gt;<sp/>NAVIGATION_CONTROLLER<sp/>:<sp/>call<sp/>function</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">==<sp/>navigation<sp/>job<sp/>==</highlight></codeline>
<codeline><highlight class="normal">NAVIGATION_CONTROLLER<sp/>-&gt;<sp/>BUGM_NAV<sp/>:<sp/>switch<sp/>ON</highlight></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>NAVIGATION_CONTROLLER</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>waiting<sp/>for<sp/>a<sp/>signal<sp/>...</highlight></codeline>
<codeline><highlight class="normal">end<sp/>hnote</highlight></codeline>
<codeline><highlight class="normal">note<sp/>over<sp/>BUGM_NAV</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>the<sp/>behaviour<sp/>receives<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>final<sp/>orientation<sp/>to<sp/>achieve</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>and<sp/>a<sp/>target<sp/>to<sp/>reach</highlight></codeline>
<codeline><highlight class="normal">end<sp/>note</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">note<sp/>over<sp/>BUGM_NAV</highlight></codeline>
<codeline><highlight class="normal">here<sp/>the<sp/>BUGM_NAV<sp/>Could<sp/></highlight></codeline>
<codeline><highlight class="normal">perform<sp/>a<sp/>backwards<sp/>movement</highlight></codeline>
<codeline><highlight class="normal">for<sp/>gaining<sp/>manouver<sp/>space</highlight></codeline>
<codeline><highlight class="normal">end<sp/>note</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">BUGM_NAV<sp/>-&gt;<sp/>GOTO_POINT<sp/>:<sp/>switch<sp/>ON</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>BUGM_NAV</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>reading<sp/>position<sp/>error<sp/>...</highlight></codeline>
<codeline><highlight class="normal">end<sp/>hnote</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>GOTO_POINT</highlight></codeline>
<codeline><highlight class="normal">turning<sp/></highlight></codeline>
<codeline><highlight class="normal">towards<sp/>the<sp/>target<sp/>...</highlight></codeline>
<codeline><highlight class="normal">end<sp/>hnote</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>GOTO_POINT</highlight></codeline>
<codeline><highlight class="normal">navigating<sp/>straight<sp/></highlight></codeline>
<codeline><highlight class="normal">to<sp/>the<sp/>target</highlight></codeline>
<codeline><highlight class="normal">end<sp/>hnote</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">BUGM_NAV<sp/>-&gt;<sp/>GOTO_POINT<sp/>:<sp/>switch<sp/>OFF</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">BUGM_NAV<sp/>-&gt;<sp/>HEAD_ORIENT<sp/>:<sp/>switch<sp/>ON</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>BUGM_NAV</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>reading<sp/>orientation<sp/>error<sp/>...</highlight></codeline>
<codeline><highlight class="normal">end<sp/>hnote</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>HEAD_ORIENT</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>turning</highlight></codeline>
<codeline><highlight class="normal">end<sp/>hnote</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">BUGM_NAV<sp/>-&gt;<sp/>HEAD_ORIENT<sp/>:<sp/>switch<sp/>OFF</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">NAVIGATION_CONTROLLER<sp/>&lt;-<sp/>BUGM_NAV<sp/>:<sp/>send<sp/>signal</highlight></codeline>
<codeline><highlight class="normal">NAVIGATION_CONTROLLER<sp/>-&gt;<sp/>BUGM_NAV<sp/>:<sp/>switch<sp/>OFF</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">==<sp/>response<sp/>==</highlight></codeline>
<codeline><highlight class="normal">NAVIGATION_MANAGER<sp/>&lt;--<sp/>NAVIGATION_CONTROLLER<sp/>:<sp/>return</highlight></codeline>
<codeline><highlight class="normal">NAVIGATION_UNIT<sp/>&lt;-<sp/>NAVIGATION_MANAGER<sp/>:<sp/>response<sp/>(RCL<sp/>movement<sp/>controller)</highlight></codeline>
<codeline><highlight class="normal">MOVE_TO<sp/>&lt;-<sp/>NAVIGATION_UNIT<sp/>:<sp/>response<sp/>(RCL<sp/>ROSPlan)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@enduml</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md170">
<title>manipulation – synchronous manipulation</title>
<para><programlisting filename=".uml"><codeline><highlight class="normal">@startuml</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">title<sp/>Synchronous<sp/>manipulation<sp/>--<sp/>RCL#2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>ENTITIES</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>COLLECT</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>MANIP_UNIT</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>MANIPULATION</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">==<sp/>put<sp/>near<sp/>to<sp/>the<sp/>marker<sp/>==</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">COLLECT<sp/>--&gt;<sp/>MANIP_UNIT<sp/>:<sp/>send<sp/>command<sp/>near</highlight></codeline>
<codeline><highlight class="normal">MANIP_UNIT<sp/>--&gt;<sp/>MANIPULATION<sp/>:<sp/>convert<sp/>and<sp/>pass<sp/>request</highlight></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>MANIPULATION<sp/>:<sp/>moveit<sp/>move()</highlight></codeline>
<codeline><highlight class="normal">MANIP_UNIT<sp/>&lt;--<sp/>MANIPULATION<sp/>:<sp/>&lt;i&gt;success&lt;/i&gt;</highlight></codeline>
<codeline><highlight class="normal">COLLECT<sp/>&lt;--<sp/>MANIPULATION<sp/>:<sp/>&lt;i&gt;success&lt;/i&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">==<sp/>home<sp/>position<sp/>==</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">COLLECT<sp/>--&gt;<sp/>MANIP_UNIT<sp/>:<sp/>send<sp/>command<sp/>home</highlight></codeline>
<codeline><highlight class="normal">MANIP_UNIT<sp/>--&gt;<sp/>MANIPULATION<sp/>:<sp/>convert<sp/>and<sp/>pass<sp/>request</highlight></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>MANIPULATION<sp/>:<sp/>moveit<sp/>move()</highlight></codeline>
<codeline><highlight class="normal">MANIP_UNIT<sp/>&lt;--<sp/>MANIPULATION<sp/>:<sp/>&lt;i&gt;success&lt;/i&gt;</highlight></codeline>
<codeline><highlight class="normal">COLLECT<sp/>&lt;--<sp/>MANIPULATION<sp/>:<sp/>&lt;i&gt;success&lt;/i&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@enduml</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e-sphinx_1autotoc_md171">
<title>Mission manager workflow</title>
<para>Here&apos;s the state diagram of the mission manager. Please take into account that the states REPLAN, COLLECT, and SOLVE, are <emphasis>landmarks</emphasis>; see the documentation about the <emphasis>robocluedo_rosplan</emphasis> package for further informations.</para>
<para>The diagram doesn&apos;t show the status FAULT_COUNT which, as the name suggests, counts the unexpected (and unexplained) failures. The node has a counter of failures, and when the counter reaches zero, the node closes wuthout succeeding the mission. This strategy <emphasis>could be replaced, or altered, in future updates.</emphasis></para>
<para><programlisting filename=".uml"><codeline><highlight class="normal">@startuml</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">state<sp/>REPLAN</highlight></codeline>
<codeline><highlight class="normal">REPLAN<sp/>:<sp/>clean<sp/>the<sp/>kb</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">state<sp/>COLLECT</highlight></codeline>
<codeline><highlight class="normal">COLLECT<sp/>:<sp/>move<sp/>the<sp/>robot<sp/>and<sp/>\n<sp/>collect<sp/>hints<sp/>around</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">state<sp/>ASK_ORACLE</highlight></codeline>
<codeline><highlight class="normal">ASK_ORACLE<sp/>:<sp/>check<sp/>if<sp/>in<sp/>the<sp/>ontology<sp/>\n<sp/>there<sp/>are<sp/>valid<sp/>hypotheses<sp/>\n<sp/>to<sp/>propose<sp/>to<sp/>the<sp/>Oracle</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">state<sp/>SOLVE</highlight></codeline>
<codeline><highlight class="normal">SOLVE<sp/>:<sp/>move<sp/>to<sp/>the<sp/>center\n<sp/>ready<sp/>to<sp/>introduce<sp/>\n<sp/>a<sp/>solution</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">state<sp/>ASK_ONTOLOGY</highlight></codeline>
<codeline><highlight class="normal">ASK_ONTOLOGY<sp/>:<sp/>check<sp/>the<sp/>solution\nask<sp/>to<sp/>the<sp/>Oracle</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>state<sp/>MISSION_STATUS_COUNT_FAULT</highlight></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>MISSION_STATUS_COUNT_FAULT<sp/>:<sp/>unexpected<sp/>situation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[*]<sp/>--&gt;<sp/>REPLAN<sp/>:<sp/>mission<sp/>manager<sp/>begins<sp/>(like<sp/>Batman...)</highlight></codeline>
<codeline><highlight class="normal">REPLAN<sp/>--&gt;<sp/>COLLECT<sp/>:<sp/>still<sp/>mumbleing</highlight></codeline>
<codeline><highlight class="normal">COLLECT<sp/>--&gt;<sp/>ASK_ONTOLOGY<sp/>:<sp/>arrived<sp/>at<sp/>the<sp/>waypoint</highlight></codeline>
<codeline><highlight class="normal">ASK_ONTOLOGY<sp/>--&gt;<sp/>COLLECT<sp/>:<sp/>no<sp/>bright<sp/>ideas</highlight></codeline>
<codeline><highlight class="normal">COLLECT<sp/>--&gt;<sp/>REPLAN<sp/>:<sp/>end<sp/>of<sp/>the<sp/>explorable<sp/>waypoints!</highlight></codeline>
<codeline><highlight class="normal">ASK_ONTOLOGY<sp/>--&gt;<sp/>SOLVE<sp/>:<sp/>at<sp/>least<sp/>one<sp/>possible<sp/>solution<sp/>found</highlight></codeline>
<codeline><highlight class="normal">SOLVE<sp/>--&gt;<sp/>REPLAN<sp/>:<sp/>need<sp/>for<sp/>updating<sp/>the<sp/>paths</highlight></codeline>
<codeline><highlight class="normal">REPLAN<sp/>--&gt;<sp/>SOLVE<sp/>:<sp/>possible<sp/>solution<sp/>ready</highlight></codeline>
<codeline><highlight class="normal">SOLVE<sp/>--&gt;<sp/>ASK_ORACLE<sp/>:<sp/>at<sp/>the<sp/>center</highlight></codeline>
<codeline><highlight class="normal">ASK_ORACLE<sp/>--&gt;<sp/>[*]<sp/>:<sp/>mystery<sp/>solved!</highlight></codeline>
<codeline><highlight class="normal">ASK_ORACLE<sp/>--&gt;<sp/>REPLAN<sp/>:<sp/>solution<sp/>wrong</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@enduml</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md__r_e_a_d_m_e-sphinx_1autotoc_md172">
<title>ROSPlan landmarks – temporal diagrams</title>
<para>The mission manager makes a high level planning, whereas the RCL ROSPlan framework performs a <emphasis>mid-level planning</emphasis>: the mission manager divides the mission into a <emphasis>policy</emphasis> made of some macro-steps, and the ROSPlan package decides how to perform such macrosteps expanding them in a sequence of actions according to the situation registered in the ROSPlan knowledge base.</para>
<para>This leads to a more elaborated architecture for this framework, but also makes more flexible the behaviour of the system.</para>
<para>The following diagrams shows not only what happens when a landmark is requested, but also how the MISSION_MANAGER carries out the ellaboration of the landmarks.</para>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md173">
<title>REPLAN landmark</title>
<para><programlisting filename=".uml"><codeline><highlight class="normal">@startuml</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">title<sp/>landmark<sp/>execution<sp/>-<sp/>REPLAN</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;&apos;<sp/>ENTITIES</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>MISSION_MANAGER</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>PIPELINE</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>KB_INTERFACE</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>LOAD</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>PLAN</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>PARSE</highlight></codeline>
<codeline><highlight class="normal">participant<sp/>DISPATCH</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&apos;&apos;<sp/>TEMPORAL<sp/>DIAGRAM</highlight></codeline>
<codeline><highlight class="normal">==<sp/>planning<sp/>phase<sp/>==</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">note<sp/>over<sp/>MISSION_MANAGER:<sp/>try<sp/>to<sp/>load<sp/>and<sp/>solve<sp/>the<sp/>problem</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MISSION_MANAGER<sp/>-&gt;<sp/>PIPELINE<sp/>:<sp/>load<sp/>(landmark<sp/>REPLAN)<sp/>and<sp/>solve</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>-&gt;<sp/>KB_INTERFACE<sp/>:<sp/>prepare<sp/>REPLAN</highlight></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>&lt;-<sp/>KB_INTERFACE<sp/>:<sp/>&lt;i&gt;always<sp/>success&lt;/i&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>-&gt;<sp/>LOAD<sp/>:<sp/>trigger<sp/>loading</highlight></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>&lt;-<sp/>LOAD<sp/>:<sp/>&lt;i&gt;success&lt;/i&gt;<sp/>(immediately)</highlight></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>PIPELINE:<sp/>waiting<sp/>&apos;load&apos;<sp/>output</highlight></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>&lt;-<sp/>LOAD<sp/>:<sp/>&apos;load&apos;<sp/>output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">note<sp/>over<sp/>PIPELINE</highlight></codeline>
<codeline><highlight class="normal">let&apos;s<sp/>assume<sp/>that<sp/>everything<sp/>went<sp/>fine</highlight></codeline>
<codeline><highlight class="normal">end<sp/>note</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>-&gt;<sp/>PLAN<sp/>:<sp/>solve<sp/>the<sp/>problem</highlight></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>&lt;-<sp/>PLAN<sp/>:<sp/>&lt;i&gt;success&lt;/i&gt;<sp/>(immediately)</highlight></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>PIPELINE:<sp/>waiting<sp/>&apos;solve&apos;<sp/>output</highlight></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>&lt;-<sp/>PLAN<sp/>:<sp/>&apos;solve&apos;<sp/>output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">note<sp/>over<sp/>PIPELINE</highlight></codeline>
<codeline><highlight class="normal">let&apos;s<sp/>assume<sp/>that<sp/>everything<sp/>went<sp/>fine</highlight></codeline>
<codeline><highlight class="normal">end<sp/>note</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MISSION_MANAGER<sp/>&lt;-<sp/>PIPELINE<sp/>:<sp/>&lt;i&gt;success&lt;/i&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">==<sp/>dispatch<sp/>phase<sp/>==</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MISSION_MANAGER<sp/>-&gt;<sp/>PIPELINE<sp/>:<sp/>parse<sp/>and<sp/>dispatch</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>-&gt;<sp/>PARSE<sp/>:<sp/>parse<sp/>plan</highlight></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>&lt;-<sp/>PARSE</highlight></codeline>
<codeline><highlight class="normal">hnote<sp/>over<sp/>PIPELINE:<sp/>waiting<sp/>&apos;parse&apos;<sp/>output</highlight></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>&lt;-<sp/>PARSE<sp/>:<sp/>&apos;parse&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>-&gt;<sp/>DISPATCH<sp/>:<sp/>dispatch<sp/>plan</highlight></codeline>
<codeline><highlight class="normal">note<sp/>over<sp/>MISSION_MANAGER,<sp/>DISPATCH<sp/>:<sp/>it<sp/>requires<sp/>a<sp/>lot<sp/>of<sp/>time:<sp/>the<sp/>system<sp/>is<sp/>running<sp/>the<sp/>RCL<sp/>ROSPlan<sp/>actions</highlight></codeline>
<codeline><highlight class="normal">PIPELINE<sp/>&lt;-<sp/>DISPATCH<sp/>:<sp/>end<sp/>execution</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MISSION_MANAGER<sp/>&lt;-<sp/>PIPELINE<sp/>:<sp/>&lt;i&gt;success&lt;/i&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@enduml</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md174">
<title>About COLLECT and SOLVE landmarks</title>
<para>the procedure is always the same for the other landmarks: the mission manager splits the landmark execution in two phases in the same way. Obviously, if something could go wrong, the procedure would be shorter, and the MISSION_MANAGER would spend a bit to understand what went wrong.</para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e-sphinx_1autotoc_md175">
<title>working hypotheses</title>
<para>Few assumptions are needed, since the architecture tries to interact with general-purpose frameworks, using standard ways for interacting with the low level system. The most important assumption is that <emphasis>the rules of the game are satisfied</emphasis>, otherwise the behaviour of the robot is not determined.</para>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md176">
<title>About the environment</title>
<para><itemizedlist>
<listitem><para>the robot moves on a flat floor: always room can be reached by moving the roobot on the same floor (the house has only one, perfectly flat, floor)</para>
</listitem><listitem><para><bold>environment completely free, without obstacles</bold>, for instance a small flat arena as in this assignment</para>
</listitem><listitem><para>the topology of the environment is well known, as well as the cartesian coordinates of the waypoints<itemizedlist>
<listitem><para>there&apos;s a node publishing the cartesian positions of the markers</para>
</listitem><listitem><para>and the <emphasis>topological map of the environment</emphasis> is known in advance</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e-sphinx_1autotoc_md177">
<title>About the reasoning</title>
<para><itemizedlist>
<listitem><para>the mystery can be solved at least with a two-steps policy COLLECT, SOLVE<itemizedlist>
<listitem><para>it is mostly due to the rules of the game</para>
</listitem><listitem><para><emphasis>if the game changes, the policy should be reviewed</emphasis> accordingly to the new rules</para>
</listitem><listitem><para>in particular, if the problem cannot be reduced in a combination of two general steps, the planner shall provide other landmarks</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><emphasis>a solution exists</emphasis><itemizedlist>
<listitem><para>i.e. the oracle works fine</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e-sphinx_1autotoc_md178">
<title>Limitations</title>
<para><itemizedlist>
<listitem><para>the robot can work only in well-known environments. It doesn&apos;t support free exploration<itemizedlist>
<listitem><para>the free exploration requires the robot to choose by itself the waypoints, maybe based on the measurements from the laser sensor, or other systems</para>
</listitem><listitem><para>currently, there&apos;s no such a functionality</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><emphasis>no secure communication error handling</emphasis>.<itemizedlist>
<listitem><para>there could be a big deal try to run the achitecture distributed on a WiFi network: when a service call fails for instance, most of the nodes of the project are not able to cope with that in a acceptable situation. Most of times the node simply closes</para>
</listitem><listitem><para>overcoming this problem requires a long work of code review and, sometimes, re-design</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e-sphinx_1autotoc_md179">
<title>Improvements and future develops</title>
<para><bold>Create a distributed version of the architecture, with multiple robots</bold>. Thanks to the strict separation between the components applied during the design and then during the implementation, the architecture can be extended to many robots inside the same environment. Some components can be centralized, such as the part concerning the ontology. The main problem in this case could be the to find a tradeoff between the bandwidth required to enable the robots to communicate with the central system, and the computational capabilities onboard.</para>
<para><bold>Architectural Review of the ROSPlan package</bold>. Currently the knowledge base interface inside the <emphasis>robocluedo_rosplan</emphasis> package is of no use for nodes outside. There are many situations in which having directives exposed by the knowledge base interface can be useful. For instance, the code of the pipeline manager, currently <emphasis>too much complex</emphasis>, can be simplified a lot distributing the capability to explain a failure on two nodes. And, finally, the capability to write inside the ontology, taking into account the characteristics of the PDDL problem, is always useful. For these reasons, the ROSPlan implementation should be reviewed in order to provide a better supporto to the working cycle. The current package can be considered a <emphasis>first prototype</emphasis>, and it shall be formalized from the architectural point of view, and reimplemented, taking into account also the <emphasis>directives</emphasis> and the <emphasis>features</emphasis> given the PDDL model.</para>
<para><bold>Manipulation Controller</bold>. The manipulation approch can be heavily reviewed. The robot currently uses a very raw implementation of a moveit-based controller using well-known poses only. The cartesian plan should be introduced. Even a end effector should be defined.</para>
<para><bold>Navigation manager and controllers</bold>. The current structure can be improved a lot. The current navigation manager is very near to be a prototype: the approach works quite good, even if the problem is too much simple to see any relevant advantage from the approach with navigation controllers, but it should be implemented in a more tidy way. For instance, the system shall be divided into several files, instead of a long one a bit lasagna-code style.</para>
<para><bold>URDF model improvements</bold>. The current module, although it works quite good, it is too much basic. The physic can be improved, regulating with more attention the inertias of the components. Also the controllers can be improved. A code review on the model could help as well.</para>
<para><bold>Adding a real graphical interface</bold>. The project completely lacks of a decent user interface, which is, in my opinion, one of the most serious limitations of the project. The user, and the developer as well, should be enabled to understand what&apos;s wrong using a GUI instead of many prints on a console. A GUI allows to see the status of the entire project <emphasis>at a glance</emphasis>, instead of reading endless logs and console messages trying to grasp something. Also the image visualisation should be improved, allowing the user to select one camera to visualise, for instance.</para>
<para><hruler/>
</para>
<para><image type="html" name="cluedexter.jpg" inline="yes"></image>
</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e-sphinx_1autotoc_md182">
<title>Author and Contacts</title>
<para>A project designed and developed by Francesco Ganci (S4143910)</para>
<para><itemizedlist>
<listitem><para><bold>Email</bold> : [*S4143910@studenti.unige.it*]() </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
