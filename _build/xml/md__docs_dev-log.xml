<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md__docs_dev-log" kind="page">
    <compoundname>md__docs_dev-log</compoundname>
    <title>RoboCLuedo – Development Log</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>template:</para>
<para><programlisting><codeline><highlight class="normal">##<sp/>data</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>...fatto...</highlight></codeline>
<codeline><highlight class="normal">-<sp/>...fatto...</highlight></codeline>
<codeline><highlight class="normal">-<sp/>...</highlight></codeline>
</programlisting></para>
<sect1 id="md__docs_dev-log_1autotoc_md20">
<title>08/08/2022 – setup della documentazione e project refactoring</title>
<para>la versione precedente del progetto ha parecchi difetti:</para>
<para><itemizedlist>
<listitem><para>veramente poco intuitiva</para>
</listitem><listitem><para>mancanza di un module testing serio</para>
</listitem><listitem><para>codice poco chiaro ed eccessivo</para>
</listitem><listitem><para>usare ROSPlan come KB è una pessima idea: complica il PDDL e potrebbe dare strani errori</para>
</listitem></itemizedlist>
</para>
<para>link alla vecchia versione del progetto: <ulink url="https://github.com/programmatoroSeduto/ExperimentalRoboticsLab-Assignment-2-OLD.git">ExperimentalRoboticsLab-Assignment-2-OLD</ulink></para>
<para><hruler/>
</para>
<para>prima del primo commit,</para>
<para><itemizedlist>
<listitem><para>creazione di una nuova repository per il progetto, link <ulink url="https://github.com/programmatoroSeduto/ExperimentalRoboticsLab-Assignment-2.git">qui</ulink></para>
</listitem><listitem><para>craeazione di un template di repository che permetta di usare plantUML (è finito il tempo di scrivere gli UML su draw.io) vedi <ulink url="https://github.com/programmatoroSeduto/plantuml-sphinx">qui (privata)</ulink></para>
</listitem><listitem><para><bold>primo setup dell&apos;area di lavoro</bold> con plantUML e Sphinx funzionante</para>
</listitem><listitem><para>struttura readme, solo elenco puntato per il momento (estendere man mano che andiamo avanti)</para>
</listitem><listitem><para><bold>COMMIT</bold> creazione di un branch vuoto per la copia degli altri eventuali pacchetti da scaricare</para>
</listitem><listitem><para><bold>COMMIT</bold> con tutto il materiale iniziale funzionante</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para><emphasis>ora siamo pronti per iniziare a lavorare con ROS</emphasis>. Prima di tutto, il package per il module testing:</para>
<para><itemizedlist>
<listitem><para><bold>NUOVO PACKAGE</bold> creazione package per il module testing: ``` catkin_create_pkg robocluedo_module_testing roscpp rospy std_msgs geometry_msgs nav_msgs std_srvs ```</para>
</listitem><listitem><para>documentazione interna al module testing con index e tutto il resto</para>
</listitem><listitem><para>creazione template per la pagina index di un package</para>
</listitem><listitem><para>qualche check prima del commit:<itemizedlist>
<listitem><para>prova a compilare .. .OK</para>
</listitem><listitem><para>make documentazione .. OK</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;module testing package&quot;</para>
</listitem><listitem><para>nuova todolist (stavolta su carta)</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>lavoro su aRMOR, estrazione del codice dal vecchio assignment, vedi <ulink url="https://github.com/programmatoroSeduto/ExperimentalRoboticsLab-Assignment-1.git">erl1</ulink>:</para>
<para><itemizedlist>
<listitem><para>download codice sul desktop</para>
</listitem><listitem><para><bold>NUOVO PACKAGE</bold> armor msgs ``` catkin_create_pkg robocluedo_armor_msgs std_msgs armor_msgs std_srvs ```</para>
</listitem><listitem><para>senza perdere tempo, prima documentazione</para>
</listitem><listitem><para><bold>NUOVO PACKAGE</bold> armor ``` catkin_create_pkg robocluedo_armor roscpp rospy armor_msgs robocluedo_armor_msgs srd_msgs std_srvs ```</para>
</listitem><listitem><para>e prima documentazione anche qui senza perdere tempo</para>
</listitem><listitem><para>giusto per, proviamo a compilare, non si sa mai</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;armor packages setup&quot;</para>
</listitem><listitem><para>importazione del codice delle interfacce aRMOR<itemizedlist>
<listitem><para>(header) armor tools</para>
</listitem><listitem><para>(header) armor cluedo</para>
</listitem><listitem><para>(codice) armor tools e armor cluedo</para>
</listitem><listitem><para>(codice nodo) cluedo armor interface</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>il primo lavoro è quello di creare i messaggi da compilare, guardando che cosa richiede l&apos;interfaccia nodo armor<itemizedlist>
<listitem><para>AddHint srv</para>
</listitem><listitem><para>DiscardHypothesis srv</para>
</listitem><listitem><para>Hypothesis msg</para>
</listitem><listitem><para>FindConsistentHypotheses srv</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>compilaziione messaggi con catkin</para>
</listitem><listitem><para>ora devo &quot;solo&quot; aggiornare il codice C++ del nodo ROS e scrivere il catkin</para>
</listitem><listitem><para>ora mancano cose tipo ... la ontology ... e tutto il resto</para>
</listitem><listitem><para>selezione dei vecchi diagrammi UML riferiti ad aRMOR</para>
</listitem><listitem><para>prima di fare altro, proviamo a compilare ... OK! perfetto</para>
</listitem><listitem><para>e aggiornamento docs</para>
</listitem></itemizedlist>
</para>
<para>TODO</para>
<para><itemizedlist>
<listitem><para>nuovi diagrammi per aRMOR (quelli che ci sono sono sbagliati...)</para>
</listitem><listitem><para>rimuovere le immagini dalla documentazione del codice per armor</para>
</listitem><listitem><para>template per le pagine di documentazione con UML</para>
</listitem><listitem><para>un branch per la documentazione Sphinx</para>
</listitem><listitem><para>e uno script per mettere online la documentazione sphinx &quot;senza sbattersi troppo&quot;</para>
</listitem><listitem><para>autenticazione SSH sul Docker di lavoro</para>
</listitem></itemizedlist>
</para>
<para>NOTE</para>
<para><itemizedlist>
<listitem><para>la pagina di documentaizone del codice va assieme al codice, invece che in una cartella separata; penso sia meglio. </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
