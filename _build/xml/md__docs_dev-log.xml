<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md__docs_dev-log" kind="page">
    <compoundname>md__docs_dev-log</compoundname>
    <title>RoboCLuedo – Development Log</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ulink url="http://www.plantuml.com/plantuml/uml/VLNlQkGs4F-kfvWB77NWuetthd-Q3-NI59h0fLt8XdufB8eqNelOaf7acAKK-XfzlJv9PoHxDybo-M2FD7z-C_ERyUxd4AMFGzSAyKvZRIo22t952cXYxCF5Ok7bM6vDR8Q78Q1NpaQqiLIkMrnv6HhKdR5wiMgbZVUtNyvSZpQW6ho9E-bLOoAgE7XSdXcA3OjEXeXUl3DMjOFUfrjSkQvpjkpfV6oyfymBsRPVCLzBhqVfyGsNMnFK6-Oxz4zlfhWpyHcy-AQ4M-btO098-0MViAM-FHWBiK5OUQS75I6Yx4gu8qqZsV4FOigD0QfpM5s1j9eUkBJQEwEXRvp5af5_TWyP-5PQkJt0NYhb1Xl3X7kTOCb9pL1cjSUuUU9xOEtD6hR33iR6GUlS8-dgY3uXXjHs2HonRd07D2ABNBbBTejnTFuHQFWVKf8d8q52RJoEHCRiTcC9a7nBGSm03ok8wBP8DWz_2U9mmxkpsNf4kz4pNGLJ-05EM9oGV4uRt_Uydfo-nc2jZCRPK72dvCo2WwZRzHIVXmgNlA774BJEnc88cowpN13j54HlZdt1DIkcMH3EtzmarMOK7hMfCJn6rnUzef3gnsLPVVT3MPNLEKCSnf-wlPfgQcNF8Pry5RFCQTKiidUUSM5w5apIpihEABXPiL-sGbNn9PrVXicyR4Tnqn9IQQy3yueKMRngAZdVFn1F0qnaBy_Byq_mPNrt642cZ3ZxBM-Jc9XY0ZUZyTZo5BmR8kKPJMqkLo_pCDGKEnL5-rZGG_hVwvfWW2xiTKqYUymhMim7idvRbH-_BvUVgFAFnvYgTOCkqfjiyqg_z1CYVVLdPpz1houWkC5JSkKq7WmJnMnLHhRGeJPI2DghPEua1TR6IfkinjPkRyj3lO0aG57LWLBoPYTpdi45VwIrsGxv0n0YHoMFp9wOIdYkoe8rp9KG6Mj_fwhsv_vm58BUwJRJACHyIkf45-cSYuJslZOjqbfXSGeUhKQFcWg83Sn_3q190rKDxwT3SVgdNJS8roQgfZ6FwF_xvzy0lmv68qIt3nIV2I_zz0hnFm00">plantUML online</ulink></para>
<para>template:</para>
<para><programlisting><codeline><highlight class="normal">##<sp/>data</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>...fatto...</highlight></codeline>
<codeline><highlight class="normal">-<sp/>...fatto...</highlight></codeline>
<codeline><highlight class="normal">-<sp/>...</highlight></codeline>
</programlisting></para>
<sect1 id="md__docs_dev-log_1autotoc_md20">
<title>08/08/2022 – setup della documentazione e project refactoring</title>
<para>la versione precedente del progetto ha parecchi difetti:</para>
<para><itemizedlist>
<listitem><para>veramente poco intuitiva</para>
</listitem><listitem><para>mancanza di un module testing serio</para>
</listitem><listitem><para>codice poco chiaro ed eccessivo</para>
</listitem><listitem><para>usare ROSPlan come KB è una pessima idea: complica il PDDL e potrebbe dare strani errori</para>
</listitem></itemizedlist>
</para>
<para>link alla vecchia versione del progetto: <ulink url="https://github.com/programmatoroSeduto/ExperimentalRoboticsLab-Assignment-2-OLD.git">ExperimentalRoboticsLab-Assignment-2-OLD</ulink></para>
<para><hruler/>
</para>
<para>prima del primo commit,</para>
<para><itemizedlist>
<listitem><para>creazione di una nuova repository per il progetto, link <ulink url="https://github.com/programmatoroSeduto/ExperimentalRoboticsLab-Assignment-2.git">qui</ulink></para>
</listitem><listitem><para>craeazione di un template di repository che permetta di usare plantUML (è finito il tempo di scrivere gli UML su draw.io) vedi <ulink url="https://github.com/programmatoroSeduto/plantuml-sphinx">qui (privata)</ulink></para>
</listitem><listitem><para><bold>primo setup dell&apos;area di lavoro</bold> con plantUML e Sphinx funzionante</para>
</listitem><listitem><para>struttura readme, solo elenco puntato per il momento (estendere man mano che andiamo avanti)</para>
</listitem><listitem><para><bold>COMMIT</bold> creazione di un branch vuoto per la copia degli altri eventuali pacchetti da scaricare</para>
</listitem><listitem><para><bold>COMMIT</bold> con tutto il materiale iniziale funzionante</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para><emphasis>ora siamo pronti per iniziare a lavorare con ROS</emphasis>. Prima di tutto, il package per il module testing:</para>
<para><itemizedlist>
<listitem><para><bold>NUOVO PACKAGE</bold> creazione package per il module testing: ``` catkin_create_pkg robocluedo_module_testing roscpp rospy std_msgs geometry_msgs nav_msgs std_srvs ```</para>
</listitem><listitem><para>documentazione interna al module testing con index e tutto il resto</para>
</listitem><listitem><para>creazione template per la pagina index di un package</para>
</listitem><listitem><para>qualche check prima del commit:<itemizedlist>
<listitem><para>prova a compilare .. .OK</para>
</listitem><listitem><para>make documentazione .. OK</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;module testing package&quot;</para>
</listitem><listitem><para>nuova todolist (stavolta su carta)</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>lavoro su aRMOR, estrazione del codice dal vecchio assignment, vedi <ulink url="https://github.com/programmatoroSeduto/ExperimentalRoboticsLab-Assignment-1.git">erl1</ulink>:</para>
<para><itemizedlist>
<listitem><para>download codice sul desktop</para>
</listitem><listitem><para><bold>NUOVO PACKAGE</bold> armor msgs ``` catkin_create_pkg robocluedo_armor_msgs std_msgs armor_msgs std_srvs ```</para>
</listitem><listitem><para>senza perdere tempo, prima documentazione</para>
</listitem><listitem><para><bold>NUOVO PACKAGE</bold> armor ``` catkin_create_pkg robocluedo_armor roscpp rospy armor_msgs robocluedo_armor_msgs srd_msgs std_srvs ```</para>
</listitem><listitem><para>e prima documentazione anche qui senza perdere tempo</para>
</listitem><listitem><para>giusto per, proviamo a compilare, non si sa mai</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;armor packages setup&quot;</para>
</listitem><listitem><para>importazione del codice delle interfacce aRMOR<itemizedlist>
<listitem><para>(header) armor tools</para>
</listitem><listitem><para>(header) armor cluedo</para>
</listitem><listitem><para>(codice) armor tools e armor cluedo</para>
</listitem><listitem><para>(codice nodo) cluedo armor interface</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>il primo lavoro è quello di creare i messaggi da compilare, guardando che cosa richiede l&apos;interfaccia nodo armor<itemizedlist>
<listitem><para>AddHint srv</para>
</listitem><listitem><para>DiscardHypothesis srv</para>
</listitem><listitem><para>Hypothesis msg</para>
</listitem><listitem><para>FindConsistentHypotheses srv</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>compilaziione messaggi con catkin</para>
</listitem><listitem><para>ora devo &quot;solo&quot; aggiornare il codice C++ del nodo ROS e scrivere il catkin</para>
</listitem><listitem><para>ora mancano cose tipo ... la ontology ... e tutto il resto</para>
</listitem><listitem><para>selezione dei vecchi diagrammi UML riferiti ad aRMOR</para>
</listitem><listitem><para>prima di fare altro, proviamo a compilare ... OK! perfetto</para>
</listitem><listitem><para>e aggiornamento docs</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;armor package first re-adaptation&quot;</para>
</listitem><listitem><para>template per le pagine di documentazione con UML</para>
</listitem><listitem><para>nuovi diagrammi per aRMOR (quelli che ci sono sono sbagliati...)<itemizedlist>
<listitem><para>class diagram iniziale</para>
</listitem><listitem><para>vediamo se genera...</para>
</listitem><listitem><para>ho dovuto risolvere uno <emphasis>stupido problema di padding</emphasis>, vedi <computeroutput>skinparam Padding &lt;tot&gt;</computeroutput></para>
</listitem><listitem><para>per il momento ci accontentiamo di semplici blocchi</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>voglio provare un po&apos; la compilazione esterna di una libreria<itemizedlist>
<listitem><para>module testing dal vecchio modulo ... in quello del module testing</para>
</listitem><listitem><para>proviamo a compiare ... non va ```text CMake Error at /opt/ros/noetic/share/catkin/cmake/catkinConfig.cmake:83 (find_package): Could not find a package configuration file provided by &quot;armor_tools&quot; with any of the following names:</para>
<para>armor_toolsConfig.cmake armor_tools-config.cmake</para>
<para>Add the installation prefix of &quot;armor_tools&quot; to CMAKE_PREFIX_PATH or set &quot;armor_tools_DIR&quot; to a directory containing one of the above files. If &quot;armor_tools&quot; provides a separate development package or SDK, be sure it has been installed. Call Stack (most recent call first): ExperimentalRoboticsLab-Assignment-2/robocluedo_module_testing/CMakeLists.txt:10 (find_package)</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><verbatim>    -- Configuring incomplete, errors occurred!
    See also &quot;/root/ros_ws/build/CMakeFiles/CMakeOutput.log&quot;.
    See also &quot;/root/ros_ws/build/CMakeFiles/CMakeError.log&quot;.
    make: *** [Makefile:17330: cmake_check_build_system] Error 1
    Invoking &quot;make cmake_check_build_system&quot; failed
    ```
- *per usare le librerie di un package A in un package B basta riferirsi al package A nel package B*
- proviamo un po&apos; questo test, giusto per essere sicuri
    - questo ... OK (dopo qualche fortissima bestemmia ... prossima volta controlla anche i file inclusi)
        ```
        roslaunch robocluedo_module_testing test_armor.launch
        ```
    - questo ... OK (ci è voluto poco stavolta, per fortuna)
        ```
        roslaunch robocluedo_module_testing test_armor_tools.launch
        ```
</verbatim><itemizedlist>
<listitem><para>voglio un attimo documentare i test in UML, per avere sempre presenti come sono fatti</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;testing armor and first documentation&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md25">
<title>09/08/2022 – modello PDDL e ROSPlan package</title>
<para><itemizedlist>
<listitem><para>serve uno <emphasis>schema completo</emphasis> dell&apos;applicazione prima di iniziare<itemizedlist>
<listitem><para>components robocluedo rosplan (solo bozza)</para>
</listitem><listitem><para><emphasis>meglio lavorare in MD</emphasis> : nessuna tabulazione fastidiosa, è più facile lavorarci su</para>
</listitem><listitem><para>components armor<itemizedlist>
<listitem><para>(ricorda di usare l&apos;opzione <computeroutput>allow_mixing</computeroutput> all&apos;inizio del codice per poter usare diversi tipi di UML nello stesso schema)</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>component movement controller</para>
</listitem><listitem><para><bold>il mission manager non lo faccio adesso</bold> perchè è il nodo che va a &quot;legare&quot; tutte le parti dell&apos;architettura. quindi, meglio lasciarlo a quando avrò un&apos;idea chiara</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;uml arch first draft&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>ora, iniziamo a lavorare su rosplan:</para>
<para><itemizedlist>
<listitem><para><bold>NUOVO PACKAGE</bold> ```bash catkin_create_pkg robocluedo_rosplan_msgs std_msgs std_srvs diagnostic_msgs geometry_msgs nav_msgs rosplan_dispatch_msgs rosplan_knowledge_msgs ```</para>
</listitem><listitem><para>documentazione del package e prima configurazione (penso userò quello che ho fatto nella precedente versione, inutile reinventare chissà che)</para>
</listitem><listitem><para>e trasferimento dei messaggi nel nuovo package (copia incolla facile facile)<itemizedlist>
<listitem><para>e compilazione ... OK</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>NUOVO PACKAGE</bold> ```bash catkin_create_pkg robocluedo_rosplan roscpp rospy std_msgs std_srvs diagnostic_msgs rosplan_dispatch_msgs rosplan_knowledge_msgs rosplan_dependencies robocluedo_rosplan_msgs ```</para>
</listitem><listitem><para>e primo setup del package</para>
</listitem><listitem><para>compilazione da vuoto ... OK</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;rosplan first setup&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>è il momento di rifare il PDDL</para>
<para><itemizedlist>
<listitem><para>iniziamo col prendere l&apos;environment dal precedente progetto</para>
</listitem><listitem><para>mi converrà progettare prima di fiondarmi sul codice...<itemizedlist>
<listitem><para>nuovo documento sul PDDL</para>
</listitem><listitem><para>una lista delle azioni PDDL e dei landmarks</para>
</listitem><listitem><para>(ho dovuto aggiornare l&apos;UML di robocluedo rosplan, mi serviva un componente che non avevo ancora menzionato)</para>
</listitem><listitem><para>(l&apos;idea è di fare il design dell&apos;intero PDDL sul documento, in modo da non dover fare due cose assieme, design e implementazione, nella fase di implementazione, <emphasis>perchè so quanto romperà il planner</emphasis>)</para>
</listitem><listitem><para>pddl delle varie azioni</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>e ora, implementazione<itemizedlist>
<listitem><para>prima versione <emphasis>completamente vuota</emphasis></para>
</listitem><listitem><para>parse ... OK (però bisogna vedere se fa il plan o no)</para>
</listitem><listitem><para>plan ... NO ... OK domain: ```lisp (define (domain robocluedo)</para>
<para>(:requirements ;; === PDDL1.1 === ;; :strips :typing :equality :existential-preconditions :universal-preconditions :conditional-effects :quantified-preconditions</para>
<para>;; === PDDL2.1 === ;; :numeric-fluents :durative-actions )</para>
<para>(:types ;; navigation system waypoint )</para>
<para>(:predicates (stub ) (not-stub ) )</para>
<para>(:functions</para>
<para>)</para>
<para>(:durative-action stub-true :parameters ( )</para>
<para>:duration (= ?duration 0.99 )</para>
<para>:condition (and (at start (not-stub )) )</para>
<para>:effect (and (at start (not (not-stub ))) (at end (stub)) ) )</para>
<para>) ``` problem: ```lisp (define (problem robocluedo-task)</para>
<para>(:domain robocluedo)</para>
<para>(:objects</para>
<para>)</para>
<para>(:init (not-stub ) )</para>
<para>(:goal (stub ))</para>
<para>) ``` plan (fino ad ora): ```text root@3b17871017fd:~/ros_ws/src/erl2-new/robocluedo_rosplan/pddl/robocluedo# ./solve_popf.sh Number of literals: 2 Constructing lookup tables: Post filtering unreachable actions: No analytic limits found, not considering limit effects of goal-only operators All the ground actions in this problem are compression-safe Initial heuristic = 1.000 ;;;; Solution Found ; States evaluated: 2 ; Cost: 0.990 ; Time 0.00 0.000: (stub-true) [0.990] ```</para>
</listitem><listitem><para>(ora, una sola azione alla volta)</para>
</listitem><listitem><para>replan<itemizedlist>
<listitem><para>importazione</para>
</listitem><listitem><para>parse ... OK</para>
</listitem><listitem><para>plan ... OK<itemizedlist>
<listitem><para><emphasis>precondition e effect richiedono comunque l&apos;operatore and, anche se hanno un solo predicato al loro interno</emphasis></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>uml del replan</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>move-to<itemizedlist>
<listitem><para>importazione<itemizedlist>
<listitem><para>meglio separare <computeroutput>move-to</computeroutput> dall&apos;ottenere l&apos;hint ... nuova azione <computeroutput>signal-collect-hint</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>parse ...</para>
</listitem><listitem><para>plan ...</para>
</listitem><listitem><para>uml dell&apos;azione implementata in ROS</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>signal-collect-hint<itemizedlist>
<listitem><para>importazione</para>
</listitem><listitem><para>parse ...</para>
</listitem><listitem><para>plan ... OK</para>
</listitem></itemizedlist>
</para>
<para>plan finora: ```text ; States evaluated: 14 ; Cost: 9.909 ; Time 0.00 0.000: (replan) [0.990] 0.991: (move-to center wp1) [0.990] 1.982: (signal-collect-hint wp1) [0.990] 2.973: (collect-hint wp1) [0.990] 3.964: (move-to wp1 wp2) [0.990] 4.955: (move-to wp2 wp3) [0.990] 5.946: (signal-collect-hint wp3) [0.990] 6.937: (collect-hint wp3) [0.990] 7.928: (move-to wp3 wp4) [0.990] 8.919: (signal-collect-hint wp4) [0.990] ``` per il goal ```lisp (:goal (and (not-dirty ) (at wp4 ) (hint-ready ) (hint-collected wp1) (hint-collected wp3 ))) ```<itemizedlist>
<listitem><para>uml</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>move to center<itemizedlist>
<listitem><para>importazione</para>
</listitem><listitem><para>solve</para>
</listitem></itemizedlist>
</para>
<para>ultimo output:</para>
<para>```text </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md28">
<title>./solve_popf.sh</title>
<para>Number of literals: 28 Constructing lookup tables: [10%] [20%] [30%] [40%] [50%] [60%] [70%] [80%] [90%] [100%] [110%] [120%] [130%] [140%] [150%] [160%] Post filtering unreachable actions: [10%] [20%] [30%] [40%] [50%] [60%] [70%] [80%] [90%] [100%] [110%] [120%] [130%] [140%] [150%] [160%] No analytic limits found, not considering limit effects of goal-only operators 93% of the ground temporal actions in this problem are compression-safe Initial heuristic = 8.000 b (7.000 | 0.990)b (6.000 | 0.990)b (5.000 | 2.972)b (4.000 | 5.945)b (3.000 | 6.936)b (2.000 | 7.927)b (1.000 | 8.918);;;; Solution Found ; States evaluated: 15 ; Cost: 9.909 ; Time 0.00 0.000: (replan) [0.990] 0.991: (move-to center wp1) [0.990] 1.982: (signal-collect-hint wp1) [0.990] 2.973: (collect-hint wp1) [0.990] 3.964: (move-to wp1 wp2) [0.990] 4.955: (move-to wp2 wp3) [0.990] 5.946: (signal-collect-hint wp3) [0.990] 6.937: (collect-hint wp3) [0.990] 7.928: (move-to wp3 wp4) [0.990] 8.919: (move-to-center wp4 center) [0.990] ```</para>
<para>per il goal:</para>
<para>```lisp (:goal (and (not-dirty ) (hint-collected wp1) (hint-collected wp3 ) (at-center ))) ```<itemizedlist>
<listitem><para><bold>COMMIT</bold> : &quot;working on PDDL (not yet finished)&quot;</para>
</listitem><listitem><para>ancora lavoro sul PDDL<itemizedlist>
<listitem><para>azione solve</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>ora chiariamo la questione dei landmark</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;working on PDDL (end of the job)&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>il pddl di base è pronto. adesso, passiamo al package:</para>
<para><itemizedlist>
<listitem><para>una descrizione formale della KB<itemizedlist>
<listitem><para>un UML sistemato della KB di ROSPlan</para>
</listitem><listitem><para>senza dovermi reinventare nulla, dovrei avere del codice già pronto dalla vecchia repo...</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>ancora meglio</bold> : ho direttamente le classi!<itemizedlist>
<listitem><para>importo il codice nella repo nuova allora, e lo rivedo un attimino</para>
</listitem><listitem><para>il codice va un attimino semplificato... ma soprattutto reso più comprensibile</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>kb tools pezzo per pezzo<itemizedlist>
<listitem><para>le macro per il log non mi piacciono molto...</para>
<para>```c++ #define NODE_NAME &quot;kb_tools&quot;</para>
<para>#ifndef <bold>DEBUG_MACROS</bold> #define <bold>DEBUG_MACROS</bold></para>
<para>#define <ref refid="kb__interface_8cpp_1a36b268389a5b36ab752d1e59f1fa63f0" kindref="member">LOGSQUARE( str )</ref> &quot;[&quot; &lt;&lt; str &lt;&lt; &quot;] &quot; #define OUTLABEL <ref refid="kb__interface_8cpp_1a36b268389a5b36ab752d1e59f1fa63f0" kindref="member">LOGSQUARE( NODE_NAME )</ref> #define <ref refid="kb__interface_8cpp_1a4c242fea9a3b706e637163f8b0eed95c" kindref="member">TLOG( msg )</ref> ROS_INFO_STREAM( OUTLABEL &lt;&lt; msg ) #define <ref refid="kb__interface_8cpp_1a723a84b8e4828b3ba1ad2ccf3e787643" kindref="member">TWARN( msg )</ref> ROS_WARN_STREAM( OUTLABEL &lt;&lt; &quot;WARNING: &quot; &lt;&lt; msg ) #define <ref refid="kb__interface_8cpp_1a59b71c836719259a2e9b1428ec35504c" kindref="member">TERR( msg )</ref> ROS_WARN_STREAM( OUTLABEL &lt;&lt; &quot;ERROR: &quot; &lt;&lt; msg )</para>
<para>#endif ```</para>
<para>non mi piacciono perchè fanno spuntare troppi warning inutili...</para>
</listitem><listitem><para>via la db mode!<itemizedlist>
<listitem><para>un compromesso: piuttosto che avere la variabile al costruttore, posso definire una macro...</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>meglio fare anche il codice in parallelo oltre che l&apos;header</para>
</listitem><listitem><para>per il momento, meglio <emphasis>eliminare la parte dei fluents</emphasis> dato che comunque per l&apos;attuale progetto non mi servono. Posso pensare di reintrodurli più avanti.</para>
</listitem><listitem><para>anche la sezione <emphasis>other queries</emphasis> si può eliminare, non mi è mai servita nemmeno per il precedente progetto<itemizedlist>
<listitem><para>già che ci sono, documento la lettura di un predicate da codice</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>escluderei l&apos;altra libreria... non mi sembra molto utile, e comunque voglio mantenere tutto sul semplice</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>prima di andare avanti, <emphasis>prova a compilare la libreria</emphasis></para>
</listitem><listitem><para>assumiamo che kb tools funzioni a dovere (dovrebbe, l&apos;ho usata nel vecchio progetto e andava bene)<itemizedlist>
<listitem><para>UML di <ref refid="classkb__tools" kindref="compound">kb_tools</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;re-adaptation of kb_tools&quot;</para>
</listitem><listitem><para>manca ancora una cosa prima di poter implementare ad esempio il sistema di landmark: <emphasis>come settare un goal</emphasis> ?<itemizedlist>
<listitem><para>documentazione sui goal</para>
</listitem><listitem><para>implementazione dei due metodi per i goal ... anzi, solo il setter, il getter è noioso da fare e probabilmente non mi servirà</para>
</listitem><listitem><para>aggiornamento degli uml di ROSplan</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>compila? compila.</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;set goal method&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>implementazione dell&apos;interfaccia minima con la kb</para>
<para><itemizedlist>
<listitem><para>launch file per ROSPlan<itemizedlist>
<listitem><para>copiato dal vecchio progetto</para>
</listitem><listitem><para>avviare si avvia senza problemi</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>già che ci sono voglio fare qualche prova sui goals</para>
</listitem></itemizedlist>
</para>
<para>problem instance:</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">rosservice<sp/>call<sp/>/rosplan_problem_interface/problem_generation_server</highlight></codeline>
<codeline><highlight class="normal">rostopic<sp/>echo<sp/>/rosplan_problem_interface/problem_instance<sp/>-n<sp/>1<sp/>-p</highlight></codeline>
</programlisting></para>
<para>ottenere l&apos;attuale goal:</para>
<para><programlisting filename=".text"><codeline><highlight class="normal">#<sp/>rosservice<sp/>call<sp/>/rosplan_knowledge_base/state/goals<sp/>&quot;predicate_name:<sp/>&apos;&apos;&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal">attributes:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>knowledge_type:<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>initial_time:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>secs:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsecs:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>is_negative:<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>instance_type:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>instance_name:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_name:<sp/>&quot;dirty&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>values:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function_value:<sp/>0.0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optimization:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expr:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tokens:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ineq:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comparison_type:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LHS:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RHS:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grounded:<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>knowledge_type:<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>initial_time:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>secs:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsecs:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>is_negative:<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>instance_type:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>instance_name:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_name:<sp/>&quot;hint-collected&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>values:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key:<sp/>&quot;wp&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>&quot;wp1&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function_value:<sp/>0.0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optimization:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expr:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tokens:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ineq:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comparison_type:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LHS:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RHS:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grounded:<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>knowledge_type:<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>initial_time:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>secs:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsecs:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>is_negative:<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>instance_type:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>instance_name:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_name:<sp/>&quot;hint-collected&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>values:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key:<sp/>&quot;wp&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value:<sp/>&quot;wp3&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function_value:<sp/>0.0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optimization:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expr:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tokens:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ineq:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comparison_type:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LHS:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RHS:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grounded:<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>knowledge_type:<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>initial_time:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>secs:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nsecs:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>is_negative:<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>instance_type:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>instance_name:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_name:<sp/>&quot;at-center&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>values:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function_value:<sp/>0.0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optimization:<sp/>&apos;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expr:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tokens:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ineq:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comparison_type:<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LHS:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RHS:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens:<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grounded:<sp/>False</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>(altre prove più avanti, mi rifiuto di scrivere chissà che sulla shell)</para>
</listitem><listitem><para><bold>NUOVO NODO</bold> : (c++) <computeroutput><ref refid="classkb__interface" kindref="compound">kb_interface</ref></computeroutput><itemizedlist>
<listitem><para>uml del nuovo nodo</para>
</listitem><listitem><para>template del codice</para>
</listitem><listitem><para>apertura dell&apos;unico servizio del nodo</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>compila? compila.</para>
</listitem><listitem><para>ora occupiamoci di fare il replan. l&apos;idea sarebbe di fare un ciclo &quot;stupido&quot; su un tot di predicati con parametri.<itemizedlist>
<listitem><para>anzitutto, struttura degli elementi del PDDL nel codice c++</para>
</listitem><listitem><para>scrittura del codice nel costruttore, <bold>PER ORA SOLO INIT</bold></para>
</listitem><listitem><para>compilare compila (a runtime bisogna vedere...)</para>
</listitem><listitem><para>replan: il ciclo stupido di cui si parlava sopra</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>alcune domande:<itemizedlist>
<listitem><para><emphasis>è necessario resettare anche il goal?</emphasis> penso proprio di no</para>
</listitem><listitem><para><emphasis>serve un servizio per scrivere il goal?</emphasis> assolutamente sì</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>servizio per indicare il goal<itemizedlist>
<listitem><para>aggiornamento UML</para>
</listitem><listitem><para>creazione del nuovo tipo di servizio</para>
</listitem><listitem><para>ora, servirà definire i vari predicati (il principio è sempre quello del ciclo stupido)</para>
</listitem><listitem><para>apertura del nuovo servizio</para>
</listitem><listitem><para>compilare compila (ora bisogna vedere se funge)</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>un minimo testing per il nodo ```bash roslaunch robocluedo_rosplan load_rosplan.launch</para>
<para>rosrun robocluedo_rosplan <ref refid="classkb__interface" kindref="compound">kb_interface</ref></para>
<para>rosservice call /rosplan_problem_interface/problem_generation_server</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md31">
<title>rostopic echo /rosplan_problem_interface/problem_instance -n 1 -p</title>
<para>rosservice list </para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md32">
<title>/update_goal</title>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md33">
<title>/replan</title>
<para>``` azione di replan: ```bash rosservice call /replan &quot;{}&quot;</para>
<para>rosservice call /rosplan_problem_interface/problem_generation_server</para>
<para>rosservice call /rosplan_knowledge_base/clear</para>
<para>rosservice call /replan &quot;{}&quot;</para>
<para>rosservice call /rosplan_problem_interface/problem_generation_server</para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md34">
<title>rostopic echo /rosplan_problem_interface/problem_instance -n 1 -p</title>
<para>``` landmarks: ```bash rosservice call /update_goal &quot;landmark: 0&quot;</para>
<para>rosservice call /rosplan_problem_interface/problem_generation_server</para>
<para>rosservice call /update_goal &quot;landmark: 1&quot;</para>
<para>rosservice call /rosplan_problem_interface/problem_generation_server</para>
<para>rosservice call /update_goal &quot;landmark: 2&quot;</para>
<para>rosservice call /rosplan_problem_interface/problem_generation_server</para>
<para>```<itemizedlist>
<listitem><para>direi che funziona! bene bene bene</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;kb interface first version (seems stable)&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>sperando che il nodo appena implementato funzioni a dovere senza sorprese, andiamo avanti col pipeline manager. <emphasis>stavolta lo voglio implementare in Python</emphasis>.</para>
<para><itemizedlist>
<listitem><para><bold>NUOVO NODO</bold> : <ref refid="rosplan__pipeline__manager_8py" kindref="compound">rosplan_pipeline_manager.py</ref><itemizedlist>
<listitem><para>primo template del nodo (penso stavolta farò un nodo semplice, procedurale, tanto sono solo servizi)</para>
</listitem><listitem><para>subito, UML del nodo e degli elementi principali di ROSplan</para>
</listitem><listitem><para>ora, <emphasis>usando l&apos;UML che ho appena fatto</emphasis>, implemento i servizi per il pipeline manager (manca il feedback per ora)</para>
</listitem><listitem><para>ho preparato un minimo template per l&apos;apertura dei client in ROSpy: ```py def open_cl( cl_name, cl_type, SRV_TIMEOUT=60 ): &apos;&apos;&apos;open a client &apos;&apos;&apos;</para>
<para>global NODE_NAME</para>
<para>rospy.loginfo(f&quot;({NODE_NAME}) client: {cl_name} ... &quot;) try: rospy.wait_for_service( cl_name, timeout=SRV_TIMEOUT )</para>
<para>except ROSException as e: rospy.logwarn(f&quot;({NODE_NAME}) client: {cl_name} UNABLE TO CONTACT within the timeout ({SRV_TIMEOUT}s) cause: {e}&quot;) raise e</para>
<para>cl_this = rospy.ServiceProxy( cl_name, cl_type ) rospy.loginfo(&quot;OK&quot;)</para>
<para>rospy.sleep(rospy.Duration(0.75))</para>
<para>return cl_this ```</para>
</listitem><listitem><para>ora che le interfacce le abbiamo, abbozzo un UML del nodo (mancano ancora parecchie cose)</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>vediamo un po&apos; di riadattare se possibile il vecchio sistema di feedback ... possibile?<itemizedlist>
<listitem><para>posso ... riadattare l&apos;idea, ma il vecchio sistema in se va riadattato</para>
</listitem><listitem><para>partiamo dallo scrivere il messaggio di feedback</para>
</listitem><listitem><para>ora il servizio implementato dal pipeline manager</para>
</listitem><listitem><para>compila? compila, dopo qualche bestemmia<itemizedlist>
<listitem><para>ricorda di inserire nel cmake anche <emphasis>message_runtime</emphasis> oltre a <emphasis>message_generation</emphasis>, altrimenti non si riesce ad importare i messaggi nei servizi nell&apos;ambito dello stesso package</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>(voglio mantenere l&apos;idea del feedback da C++)</para>
</listitem><listitem><para>aggiornamento dell&apos;UML del nodo includendo anche il feedback manager</para>
</listitem><listitem><para>e apriamo il servizio e il topic</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>adesso che il nodo ha tutte le interfacce esposte, lavoro per aggiungere le funzionalità una ad una<itemizedlist>
<listitem><para><emphasis>caricamento del problema</emphasis><itemizedlist>
<listitem><para>serve ancora una subscription, altrimenti non riesco a capire quando il load non ha avuto successo</para>
</listitem><listitem><para>prima di andare avanti, UML (sarà lunga stasera...)</para>
</listitem><listitem><para>ovviamente manca anche la parte in cui scrivo i landmark nel problema... aggiungere</para>
</listitem><listitem><para>e dopo averla implementata, aggiornare l&apos;UML</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>e test intermedio (mai fidarsi di Python) ``` </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md36">
<title>shell 1</title>
<para>roslaunch robocluedo_rosplan load_rosplan.launch</para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md37">
<title>shell 2</title>
<para>rosrun robocluedo_rosplan <ref refid="classkb__interface" kindref="compound">kb_interface</ref></para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md38">
<title>shell 3</title>
<para>rosrun robocluedo_rosplan <ref refid="rosplan__pipeline__manager_8py" kindref="compound">rosplan_pipeline_manager.py</ref></para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md39">
<title>shell 4</title>
<para>rosservice list | grep robocluedo</para>
<para>rosservice call /robocluedo/pipeline_manager &quot;{load_problem: false, solve_problem: false, parse_plan: false, execute_plan: false, landmark: 0}&quot;</para>
<para>rosservice call /robocluedo/pipeline_manager &quot;{load_problem: true, solve_problem: false, parse_plan: false, execute_plan: false, landmark: 0}&quot;</para>
<para>rosservice call /robocluedo/pipeline_manager &quot;{load_problem: true, solve_problem: false, parse_plan: false, execute_plan: false, landmark: 1}&quot;</para>
<para>rosservice call /robocluedo/pipeline_manager &quot;{load_problem: true, solve_problem: false, parse_plan: false, execute_plan: false, landmark: 2}&quot;</para>
<para>rosservice call /robocluedo/pipeline_manager &quot;{load_problem: true, solve_problem: false, parse_plan: false, execute_plan: false, landmark: 3}&quot;</para>
<para>rosservice call /robocluedo/pipeline_manager &quot;{load_problem: true, solve_problem: false, parse_plan: false, execute_plan: false, landmark: -1}&quot; ```<itemizedlist>
<listitem><para><emphasis>per oggi ho sofferto abbastanza</emphasis></para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;working on pipeline manager (adding functionalities)&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<sect2 id="md__docs_dev-log_1autotoc_md41">
<title>10/08/2021 – ancora su rosplan</title>
<para>torniamo a lavorare sul pipeline manager, una funzionalità per volta. Ieri: l&apos;istanza del problema.</para>
<para><itemizedlist>
<listitem><para><emphasis>soluzione del problema</emphasis> usando il planner<itemizedlist>
<listitem><para>implementazione</para>
</listitem><listitem><para>serve anche aprire il subscriber con il planner per capire quando il plan è andato bene</para>
</listitem><listitem><para><emphasis>come capire se il problema non è risolvibile o se c&apos;è stato qualcos&apos;altro che non va?</emphasis></para>
</listitem><listitem><para>per provare, rendo volutamente irrisolvibile il problema: ``` (:goal (and (dirty ) (not-dirty ) (hint-collected wp1) (hint-collected wp3 ) (at-center ))) ```</para>
</listitem><listitem><para>output lato rosplan: ``` [ INFO] [1660112152.481829500]: KCL: (/rosplan_problem_interface) (OUT.pddl) Generating problem file. [ INFO] [1660112152.829298800]: KCL: (/rosplan_problem_interface) (OUT.pddl) The problem was generated. [ INFO] [1660112152.829847100]: KCL: (/rosplan_planner_interface) Problem received. [ INFO] [1660112162.234649900]: KCL: (/rosplan_planner_interface) (OUT.pddl) Writing problem to file. [ INFO] [1660112162.234786600]: KCL: (/rosplan_planner_interface) (OUT.pddl) Running: timeout 10 /root/ros_ws/src/ROSPlan/rosplan_planning_system/common/bin/popf -T /root/ros_ws/src/erl2-new/robocluedo_rosplan/pddl/robocluedo/robocluedo_domain.pddl /root/ros_ws/src/erl2-new/robocluedo_rosplan/data/OUT.pddl &gt; /root/ros_ws/src/erl2-new/robocluedo_rosplan/data/plan.pddl [ INFO] [1660112172.240622500]: KCL: (/rosplan_planner_interface) (OUT.pddl) Planning complete [ INFO] [1660112172.240715400]: KCL: (/rosplan_planner_interface) (OUT.pddl) Plan was unsolvable. ```</para>
</listitem><listitem><para>output lato shell: ``` root@3b17871017fd:~/ros_ws/src/erl2-new/robocluedo_rosplan/launch# rosservice call /rosplan_problem_interface/problem_generation_server</para>
<para>root@3b17871017fd:~/ros_ws/src/erl2-new/robocluedo_rosplan/launch# rosservice call /rosplan_planner_interface/planning_server ERROR: service [/rosplan_planner_interface/planning_server] responded with an error: b&apos;&apos; root@3b17871017fd:~/ros_ws/src/erl2-new/robocluedo_rosplan/launch# ```</para>
</listitem><listitem><para>il topic non riceve nulla, quindi significa che il plan non è andato a buon fine</para>
</listitem><listitem><para>il goal che ho scelto causa attesa (in questo caso viene sollevata un&apos;eccezione riguadante il server)</para>
</listitem><listitem><para>mi serve un goal che dia contraddizione immediata. questo funziona: ``` (:goal (and (not-is-center center ))) ```</para>
</listitem><listitem><para>anche in questo caso non viene inviato nulla</para>
</listitem><listitem><para>il file generato dal planner contiene questo: ``` Number of literals: 28 Constructing lookup tables: [10%] [20%] [30%] [40%] [50%] [60%] [70%] [80%] [90%] [100%] [110%] [120%] [130%] [140%] [150%] [160%] [170%] </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md__docs_dev-log_1autotoc_md42">
<title>A problem has been encountered, and the problem has been deemed unsolvable</title>
<para>The goal fact: (not-is-center center)</para>
<para>...cannot be found either in the initial state, as an add effect of an action, or as a timed initial literal. As such, the problem has been deemed unsolvable. ```<itemizedlist>
<listitem><para>per capire se il problema non è risolvibile, occore<itemizedlist>
<listitem><para>eliminare il precedente file di plan</para>
</listitem><listitem><para>caricare nel parameter server il percorso dove verrà caricato il file di plan dal planner</para>
</listitem><listitem><para>leggere il file di plan e cercare all&apos;interno di esso la stringa &quot;the problem has been deemed unsolvable&quot;</para>
</listitem><listitem><para>se la stringa c&apos;è, allora il problema è chiaramente irrisolvibile, altrimenti (il file non esiste proprio oppure è diverso) il problema è di altra natura</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>implementazione ...<itemizedlist>
<listitem><para>caricamento percorso nel parameter server tramite launch file</para>
</listitem><listitem><para>lavoro col file di plan</para>
</listitem><listitem><para>ora manca solo l&apos;eccezione</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>e urge una prova a questo punto: per ora nel caso del plan unsolvable immediatamente ``` </para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md43">
<title>shell 1</title>
<para>roslaunch robocluedo_rosplan load_rosplan.launch</para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md44">
<title>shell 2</title>
<para>rosrun robocluedo_rosplan <ref refid="classkb__interface" kindref="compound">kb_interface</ref></para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md45">
<title>shell 3</title>
<para>rosrun robocluedo_rosplan <ref refid="rosplan__pipeline__manager_8py" kindref="compound">rosplan_pipeline_manager.py</ref></para>
<para>rosservice call /robocluedo/pipeline_manager &quot;{load_problem: true, solve_problem: true, parse_plan: false, execute_plan: false, landmark: 0}&quot; ```<itemizedlist>
<listitem><para>pare che funzioni. tutti i landmark paiono portare ad una soluzione</para>
</listitem><listitem><para><bold>ISSUE</bold> (ma basta solo stare attenti): il goal col fallimento immediato <computeroutput>(:goal (and (not-is-center center )))</computeroutput> rimane nel goal, non viene eliminata dalla kb interface.</para>
</listitem></itemizedlist>
</para>
<para><bold>COMMIT</bold> : &quot;working on pipeline manager (planning interface)&quot;<itemizedlist>
<listitem><para><emphasis>parsing del plan</emphasis><itemizedlist>
<listitem><para>implementazione (solo trigger per ora)</para>
</listitem><listitem><para>e test ... funge!</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;working on pipeline manager (parsing interface)&quot;</para>
</listitem><listitem><para>prima di andare avanti mi servono le simulated actions<itemizedlist>
<listitem><para>posso implementare una prima versione del dispatcher (per ora senza il feedback)</para>
</listitem><listitem><para>test ``` rosservice call /robocluedo/pipeline_manager &quot;{load_problem: true, solve_problem: true, parse_plan: true, execute_plan: true, landmark: 0}&quot; ```</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>per quanto riguarda il pipeline manager questo è tutto ciò che posso fare ora.</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;working on pipeline manager (simulated action and dispatch)&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>passiamo a lavorare sul feedback manager:</para>
<para><itemizedlist>
<listitem><para>anzitutto lettura del vecchio codice (l&apos;idea è la stessa: una classe che posso usare da padre per altre classi, o che posso istanziare)</para>
</listitem><listitem><para>la classe precedente non è più utilizzabile, però posso riadattarla, stesso lavoro di <ref refid="classkb__tools" kindref="compound">kb_tools</ref> direi<itemizedlist>
<listitem><para>creazione header e cpp file</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>adesso, una cosa per volta, a partire dall&apos;header<itemizedlist>
<listitem><para>librerie e &quot;contorno&quot;</para>
</listitem><listitem><para>funzione per la scrittura rapida del messaggio</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>per ora basta che compili (i feedback li scrivo man mano che scrivo le azioni)<itemizedlist>
<listitem><para>compila? compila.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>UML del feedback manager (per ora senza indicare i tipi di feedback)</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;working on feedback manager (first basic implementation)&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>meglio iniziare a strutturare le implementazioni delle azioni PDDL:</para>
<para><itemizedlist>
<listitem><para>prima, meglio farsi un template minimo per gli header</para>
<para>header: (<ref refid="action__name_8h" kindref="compound">action_name.h</ref>)</para>
<para>```c++</para>
<para>```</para>
<para>implementazione della classe: (<ref refid="action__name_8cpp" kindref="compound">action_name.cpp</ref>)</para>
<para>```c++</para>
<para>```</para>
<para>nodo che implementa la classe: (<ref refid="action__name__node_8cpp" kindref="compound">action_name_node.cpp</ref>)</para>
<para>```c++</para>
<para>```</para>
<para>catkin:</para>
<para>```cmake add_library( action_name src/robocluedo_rosplan_actions/action_name.cpp ) target_link_libraries( action_name ${catkin_LIBRARIES} feedback_manager <ref refid="classkb__tools" kindref="compound">kb_tools</ref> rosplan_action_interface ) add_executable( node_action_name src/robocluedo_rosplan_actions/action_name_node.cpp ) add_dependencies( node_action_name ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS} ) target_link_libraries( node_action_name ${catkin_LIBRARIES} feedback_manager <ref refid="classkb__tools" kindref="compound">kb_tools</ref> rosplan_action_interface action_name ) ```</para>
</listitem><listitem><para>compila?<itemizedlist>
<listitem><para><ulink url="https://cplusplus.com/forum/general/203321/">ricorda questo errore!</ulink> piuttosto fastidioso da risolvere</para>
</listitem><listitem><para>dopo aver tribolato mezz&apos;ora, ci siamo</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>adesso possiamo partire con l&apos;implementazione delle azioni</para>
</listitem><listitem><para><emphasis>replan</emphasis><itemizedlist>
<listitem><para>creazione delle azioni</para>
</listitem><listitem><para>UML dell&apos;azione, giusto per capire che canali aprire</para>
</listitem><listitem><para>implementazione</para>
</listitem><listitem><para>cmake</para>
</listitem><listitem><para>compila? compila.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><emphasis>move-to</emphasis><itemizedlist>
<listitem><para>creazione dell&apos;azione</para>
</listitem><listitem><para>UML della action</para>
</listitem><listitem><para>manca un servizio per move_to ...</para>
</listitem><listitem><para>apertura delle interfacce (ne serve solo una)</para>
</listitem><listitem><para>implementazione</para>
</listitem><listitem><para>e cmake</para>
</listitem><listitem><para>compila? compila.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;working on robocluedo_rosplan_actions (replan, move_to)&quot;</para>
</listitem><listitem><para><emphasis>collect-hint</emphasis><itemizedlist>
<listitem><para><emphasis>pessimo design</emphasis> : meglio ridimensionare questa azione</para>
</listitem><listitem><para><emphasis>manca il servizio manipulation!</emphasis></para>
</listitem><listitem><para>creazione dei file per l&apos;implementazione dell&apos;azione</para>
</listitem><listitem><para>implementazione</para>
</listitem><listitem><para>cmake</para>
</listitem><listitem><para>compila? compila.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><emphasis>move-to-center</emphasis> è praticamente identica alla <emphasis>move-to</emphasis> di prima<itemizedlist>
<listitem><para>uml copiato e incollato</para>
</listitem><listitem><para>l&apos;implementazione è praticamente identica a <emphasis>move-to</emphasis></para>
</listitem><listitem><para>cmake</para>
</listitem><listitem><para>compila? ovviamente compila.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>la <emphasis>solve</emphasis> è una simulated action: dato che solo il mission manager può accedere alla ontology, la solve perde di ogni utilità</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;working on robocluedo_rosplan_actions (end of the job)&quot;</para>
</listitem><listitem><para>implementare (solo per il testing) un nodo che imiti navigation e manipulation<itemizedlist>
<listitem><para><bold>NUOVO NODO</bold> : <ref refid="namespacerosplan__simulated__motion__system" kindref="compound">rosplan_simulated_motion_system</ref></para>
</listitem><listitem><para>implementazione e installazione</para>
</listitem><listitem><para>e un minimo testing</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>(manca solo da chiarire il sistema di feedback)</para>
</listitem><listitem><para>feedback &quot;hw manipulation failure&quot;<itemizedlist>
<listitem><para>...e tutti gli altri tipi di feedback</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>compila? compila</para>
</listitem><listitem><para><bold>gestire meglio l&apos;invio dei feedback</bold>. CI sono vari problemi:<itemizedlist>
<listitem><para>il feedback dev&apos;essere inviato <emphasis>solo quando si presenta un problema</emphasis> e il pipeline manager dev&apos;essere pronto a riceverlo</para>
</listitem><listitem><para>va inviato solo ed esclusivamente un feedback alla volta</para>
</listitem><listitem><para>il feedback di successo non esiste, è inutile</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>ora, tutti i feedback in tutte le azioni<itemizedlist>
<listitem><para>in collect hint</para>
</listitem><listitem><para>in move to</para>
</listitem><listitem><para>in move to center</para>
</listitem><listitem><para>in replan</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;working on robocluedo_rosplan_actions (feedbacks from the actions)&quot;</para>
</listitem><listitem><para>come <emphasis>ultima fatica per oggi</emphasis> implementazione dell&apos;esecuzione nella pipeline (test domani)<itemizedlist>
<listitem><para>(manca solo la parte riguardande i feedback)</para>
</listitem><listitem><para>giusto un micro test per capire se è tutto a posto ```bash </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md48">
<title>shell 1</title>
<para>roslaunch robocluedo_rosplan load_rosplan.launch</para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md49">
<title>shell 2</title>
<para>rosrun robocluedo_rosplan <ref refid="classkb__interface" kindref="compound">kb_interface</ref></para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md50">
<title>shell 3 (not with simulated actions)</title>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md51">
<title>rosrun robocluedo_rosplan rosplan_simulated_motion_system.py</title>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md52">
<title>shell 4</title>
<para>rosrun robocluedo_rosplan <ref refid="rosplan__pipeline__manager_8py" kindref="compound">rosplan_pipeline_manager.py</ref></para>
<para>rosservice call /robocluedo/pipeline_manager &quot;{load_problem: true, solve_problem: true, parse_plan: true, execute_plan: true, landmark: 2}&quot; ```<itemizedlist>
<listitem><para><bold>ISSUES</bold> che non potevo notare prima di avere il sistema completo (usando solo simulated actions)<itemizedlist>
<listitem><para>(GRAVE) la sequenza dei landmark porta ad un problema irrisolvibile, vedi la combinazione tra i predicati at e explored (probabilmente è un problema della attuale kb interface che non tiene conto di questo conflitto). lo scenario di utilizzo dovrebbe essere: (landmarks) 0 1 1 1 ... 1 2 0 1 ...</para>
</listitem><listitem><para>(minore) la pipeline non segnala il raggiungimento del goal nel messaggio...</para>
</listitem><listitem><para>(minore) il log nella pipeline non segna la fine del dispatch</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;working on the pipeline manager (feedback management)&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<sect2 id="md__docs_dev-log_1autotoc_md54">
<title>11/08/2022 – ancora su ROSPlan</title>
<para>anzitutto, vorrei lavorare sulle issue di ieri: il fatto che la sequenza di landmark che mi aspetto non funzioni come si deve è un problema grave che va risolto al più presto.</para>
<para><itemizedlist>
<listitem><para>un test più approfondito:</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">#<sp/>shell<sp/>1</highlight></codeline>
<codeline><highlight class="normal">roslaunch<sp/>robocluedo_rosplan<sp/>load_rosplan.launch</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>shell<sp/>2</highlight></codeline>
<codeline><highlight class="normal">rosrun<sp/>robocluedo_rosplan<sp/>kb_interface</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>shell<sp/>3</highlight></codeline>
<codeline><highlight class="normal">rosrun<sp/>robocluedo_rosplan<sp/>rosplan_pipeline_manager.py</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>shell<sp/>4</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/><sp/><sp/>landmarks:<sp/>0<sp/>1<sp/>1<sp/>1<sp/>2</highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>0}&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>1}&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>1}&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>1}&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>2}&quot;</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para><bold>ALTRO ASPETTO DA AFFINARE</bold>: il feedback di successo managi non servirà, però va comunque scritto nel messaggio di ritorno.<itemizedlist>
<listitem><para>(lo faccio adesso)</para>
</listitem><listitem><para>test ... e ok!</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>ora, sostituisco le simulated actions con le mie implementazioni</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".xml"><codeline><highlight class="normal">&lt;</highlight><highlight class="keywordtype">node</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">name</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;rosplan_interface_???&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">pkg</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;robocluedo_rosplan&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">type</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;node_???&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">respawn</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">output</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;screen&quot;</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">param</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">name</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;knowledge_base&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">value</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;rosplan_knowledge_base&quot;</highlight><highlight class="normal"><sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">param</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">name</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;pddl_action_name&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">value</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;???&quot;</highlight><highlight class="normal"><sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">param</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">name</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;action_dispatch_topic&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">value</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;/rosplan_plan_dispatcher/action_dispatch&quot;</highlight><highlight class="normal"><sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">param</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">name</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;action_feedback_topic&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">value</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;/rosplan_plan_dispatcher/action_feedback&quot;</highlight><highlight class="normal"><sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">param</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">name</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;action_duration&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">value</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;0.99&quot;</highlight><highlight class="normal"><sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">param</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">name</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;action_probability&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">value</highlight><highlight class="normal">=</highlight><highlight class="stringliteral">&quot;1.0&quot;</highlight><highlight class="normal"><sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">node</highlight><highlight class="normal">&gt;</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>e test delle actions reali<itemizedlist>
<listitem><para><emphasis>mi sono dimenticato di compilare move_to_center!</emphasis></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">#<sp/>shell<sp/>1</highlight></codeline>
<codeline><highlight class="normal">roslaunch<sp/>robocluedo_rosplan<sp/>load_rosplan.launch</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>shell<sp/>2</highlight></codeline>
<codeline><highlight class="normal">rosrun<sp/>robocluedo_rosplan<sp/>kb_interface</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>shell<sp/>3</highlight></codeline>
<codeline><highlight class="normal">rosrun<sp/>robocluedo_rosplan<sp/>rosplan_simulated_motion_system.py</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>shell<sp/>4</highlight></codeline>
<codeline><highlight class="normal">rosrun<sp/>robocluedo_rosplan<sp/>rosplan_pipeline_manager.py</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>shell<sp/>5</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/><sp/><sp/>landmarks:<sp/>0<sp/>1<sp/>1<sp/>1<sp/>2<sp/>0<sp/>1<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>0}&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>1}&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>1}&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>1}&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>2}&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>ERRORE<sp/>problema<sp/>non<sp/>risolvibile<sp/>(correttamente<sp/>segnalato<sp/>dal<sp/>pipeline<sp/>manager)</highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>1}&quot;<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>problema<sp/>risolvibile</highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>0}&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>1}&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal">rosservice<sp/>call<sp/>/robocluedo/pipeline_manager<sp/>&quot;{load_problem:<sp/>true,<sp/>solve_problem:<sp/>true,<sp/>parse_plan:<sp/>true,<sp/>execute_plan:<sp/>true,<sp/>landmark:<sp/>2}&quot;</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>(alla fine la issue di ieri era ... semplice sonno)</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;working on robocluedo rosplan actions (launch file)&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>con ROSPlan per il momento dovrei aver finito. passiamo ora a lavorare al movement controller. IDEE:</para>
<para><itemizedlist>
<listitem><para>dato che sulla macchina virtuale ci sono così tanti modi di fare navigation col robot, vorrei creare un&apos;interfaccia per usarli tutti, a scelta</para>
</listitem><listitem><para>il progetto attuale per il momento <emphasis>non includerà move_base</emphasis> per il semplice fatto che in questo contesto non è richiesta la navigazione indoor</para>
</listitem><listitem><para>per quanto riguarda moveIt, credo riciclerò tutto dal vecchio progetto ... oppure sarebbe carino usare tf per gestire meglio la posizione dell&apos;end effector, in modo che vada proprio vicino al marker (questo mi darebbe l&apos;opportuunità di approfondire tf2 e simili)</para>
</listitem></itemizedlist>
</para>
<para>lavoro sul movement controller, anzitutto il modello del robot:</para>
<para><itemizedlist>
<listitem><para><bold>IMPORTAZIONE PACKAGE</bold> erl2 (lo starter kit) dal vecchio progetto<itemizedlist>
<listitem><para>(importazione in una cartella separata chiamata <computeroutput>robocluedo_dependencies</computeroutput>, in vista di importare anche openCV e simili)</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>compila? compila, <emphasis>e vede correttamente il pakcage sotto la cartella dependencies</emphasis></para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;robocluedo dependencies&quot;</para>
</listitem><listitem><para>documentazione dello starter kit (dal precedente assignment)<itemizedlist>
<listitem><para>*(mi sono appena reso conto che tale documentazione ... non esiste)*</para>
</listitem><listitem><para>documentazione del nodo &quot;simulation&quot; con UML incluso<itemizedlist>
<listitem><para>(c&apos;è voluto più tempo del previsto ...)</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>importazione del modello del robot dal precedente package (solo URDF per ora...)<itemizedlist>
<listitem><para>nuova cartella <computeroutput>robocluedo_dependencies/robocluedo_urdf_model</computeroutput> con tutti gli strumenti di sviluppo del caso</para>
</listitem><listitem><para>con solito environment standard (al terzo progetto ce la facciamo...)</para>
</listitem><listitem><para>e documentazione (un male necessario)</para>
</listitem><listitem><para><emphasis>il precedente modello è troppo disordinato ...</emphasis> meglio mettere in ordine, iniziando col separare i componenti di Gazebo (e altri lavori)</para>
</listitem><listitem><para>ho solo scomposto il modello, dovrebbe continuare a funzionare... e funziona infatti (meno male)</para>
</listitem><listitem><para>e torniamo sulla documentazione (per ora molto minimal)</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;working on robot model (first setup, xacro model)&quot;</para>
</listitem><listitem><para>e adesso il package in MoveIt<itemizedlist>
<listitem><para>prima creazione col setup assistant</para>
</listitem><listitem><para>il gripper non funziona bene ... tento di correggerlo ...</para>
</listitem><listitem><para>(anche qui c&apos;è voluto più del previsto)</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>e facciamo funzionare il package MoveIt<itemizedlist>
<listitem><para>seguendo la procedura sulle slides...</para>
</listitem><listitem><para>funziona? <bold>funziona!</bold></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;working on robot model (moveit package, fixes on the urdf model)&quot;</para>
</listitem></itemizedlist>
</para>
<para>TODO</para>
<para><itemizedlist>
<listitem><para>documentazione del package ROSPlan</para>
</listitem><listitem><para>UML finale per ROSPlan</para>
</listitem><listitem><para><emphasis>module testing</emphasis> su <ref refid="classkb__tools" kindref="compound">kb_tools</ref></para>
</listitem><listitem><para>implementazione precisa dell&apos;azione move-to</para>
</listitem><listitem><para>in tutti gli UML dei componenti delle implementazioni delle azioni PDDL c&apos;è una parte comune di feedback: scrivila una volta per tutte e copia-incolla in tutti i diagrammi</para>
</listitem><listitem><para>aggiungere le pagine di documentazione del codice di Sphinx!</para>
</listitem><listitem><para>aggiornare i template delle actions in questo file</para>
</listitem><listitem><para>rimuovere le immagini dalla documentazione del codice per armor</para>
</listitem><listitem><para>un branch per la documentazione Sphinx</para>
</listitem><listitem><para>e uno script per mettere online la documentazione sphinx &quot;senza sbattersi troppo&quot;</para>
</listitem><listitem><para>approfondire UML armor</para>
</listitem><listitem><para>aggiornare il file di descrizione e design del PDDL con il codice corretto<itemizedlist>
<listitem><para>correggere i landmark, oppure eliminare direttamente la sezione</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>specificare negli UML, nel tipo di topic/servizio, <emphasis>anche il formato del tipo</emphasis>, ad esempio se è *.msg* o anche *.srv*</para>
</listitem><listitem><para>autenticazione SSH sul Docker di lavoro</para>
</listitem></itemizedlist>
</para>
<para>NOTE</para>
<para><itemizedlist>
<listitem><para>la pagina di documentaizone del codice va assieme al codice, invece che in una cartella separata; penso sia meglio. </para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
