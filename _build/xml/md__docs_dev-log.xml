<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md__docs_dev-log" kind="page">
    <compoundname>md__docs_dev-log</compoundname>
    <title>RoboCLuedo – Development Log</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ulink url="http://www.plantuml.com/plantuml/uml/VLNlQkGs4F-kfvWB77NWuetthd-Q3-NI59h0fLt8XdufB8eqNelOaf7acAKK-XfzlJv9PoHxDybo-M2FD7z-C_ERyUxd4AMFGzSAyKvZRIo22t952cXYxCF5Ok7bM6vDR8Q78Q1NpaQqiLIkMrnv6HhKdR5wiMgbZVUtNyvSZpQW6ho9E-bLOoAgE7XSdXcA3OjEXeXUl3DMjOFUfrjSkQvpjkpfV6oyfymBsRPVCLzBhqVfyGsNMnFK6-Oxz4zlfhWpyHcy-AQ4M-btO098-0MViAM-FHWBiK5OUQS75I6Yx4gu8qqZsV4FOigD0QfpM5s1j9eUkBJQEwEXRvp5af5_TWyP-5PQkJt0NYhb1Xl3X7kTOCb9pL1cjSUuUU9xOEtD6hR33iR6GUlS8-dgY3uXXjHs2HonRd07D2ABNBbBTejnTFuHQFWVKf8d8q52RJoEHCRiTcC9a7nBGSm03ok8wBP8DWz_2U9mmxkpsNf4kz4pNGLJ-05EM9oGV4uRt_Uydfo-nc2jZCRPK72dvCo2WwZRzHIVXmgNlA774BJEnc88cowpN13j54HlZdt1DIkcMH3EtzmarMOK7hMfCJn6rnUzef3gnsLPVVT3MPNLEKCSnf-wlPfgQcNF8Pry5RFCQTKiidUUSM5w5apIpihEABXPiL-sGbNn9PrVXicyR4Tnqn9IQQy3yueKMRngAZdVFn1F0qnaBy_Byq_mPNrt642cZ3ZxBM-Jc9XY0ZUZyTZo5BmR8kKPJMqkLo_pCDGKEnL5-rZGG_hVwvfWW2xiTKqYUymhMim7idvRbH-_BvUVgFAFnvYgTOCkqfjiyqg_z1CYVVLdPpz1houWkC5JSkKq7WmJnMnLHhRGeJPI2DghPEua1TR6IfkinjPkRyj3lO0aG57LWLBoPYTpdi45VwIrsGxv0n0YHoMFp9wOIdYkoe8rp9KG6Mj_fwhsv_vm58BUwJRJACHyIkf45-cSYuJslZOjqbfXSGeUhKQFcWg83Sn_3q190rKDxwT3SVgdNJS8roQgfZ6FwF_xvzy0lmv68qIt3nIV2I_zz0hnFm00">plantUML online</ulink></para>
<para>template:</para>
<para><programlisting><codeline><highlight class="normal">##<sp/>data</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>...fatto...</highlight></codeline>
<codeline><highlight class="normal">-<sp/>...fatto...</highlight></codeline>
<codeline><highlight class="normal">-<sp/>...</highlight></codeline>
</programlisting></para>
<sect1 id="md__docs_dev-log_1autotoc_md20">
<title>08/08/2022 – setup della documentazione e project refactoring</title>
<para>la versione precedente del progetto ha parecchi difetti:</para>
<para><itemizedlist>
<listitem><para>veramente poco intuitiva</para>
</listitem><listitem><para>mancanza di un module testing serio</para>
</listitem><listitem><para>codice poco chiaro ed eccessivo</para>
</listitem><listitem><para>usare ROSPlan come KB è una pessima idea: complica il PDDL e potrebbe dare strani errori</para>
</listitem></itemizedlist>
</para>
<para>link alla vecchia versione del progetto: <ulink url="https://github.com/programmatoroSeduto/ExperimentalRoboticsLab-Assignment-2-OLD.git">ExperimentalRoboticsLab-Assignment-2-OLD</ulink></para>
<para><hruler/>
</para>
<para>prima del primo commit,</para>
<para><itemizedlist>
<listitem><para>creazione di una nuova repository per il progetto, link <ulink url="https://github.com/programmatoroSeduto/ExperimentalRoboticsLab-Assignment-2.git">qui</ulink></para>
</listitem><listitem><para>craeazione di un template di repository che permetta di usare plantUML (è finito il tempo di scrivere gli UML su draw.io) vedi <ulink url="https://github.com/programmatoroSeduto/plantuml-sphinx">qui (privata)</ulink></para>
</listitem><listitem><para><bold>primo setup dell&apos;area di lavoro</bold> con plantUML e Sphinx funzionante</para>
</listitem><listitem><para>struttura readme, solo elenco puntato per il momento (estendere man mano che andiamo avanti)</para>
</listitem><listitem><para><bold>COMMIT</bold> creazione di un branch vuoto per la copia degli altri eventuali pacchetti da scaricare</para>
</listitem><listitem><para><bold>COMMIT</bold> con tutto il materiale iniziale funzionante</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para><emphasis>ora siamo pronti per iniziare a lavorare con ROS</emphasis>. Prima di tutto, il package per il module testing:</para>
<para><itemizedlist>
<listitem><para><bold>NUOVO PACKAGE</bold> creazione package per il module testing: ``` catkin_create_pkg robocluedo_module_testing roscpp rospy std_msgs geometry_msgs nav_msgs std_srvs ```</para>
</listitem><listitem><para>documentazione interna al module testing con index e tutto il resto</para>
</listitem><listitem><para>creazione template per la pagina index di un package</para>
</listitem><listitem><para>qualche check prima del commit:<itemizedlist>
<listitem><para>prova a compilare .. .OK</para>
</listitem><listitem><para>make documentazione .. OK</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;module testing package&quot;</para>
</listitem><listitem><para>nuova todolist (stavolta su carta)</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>lavoro su aRMOR, estrazione del codice dal vecchio assignment, vedi <ulink url="https://github.com/programmatoroSeduto/ExperimentalRoboticsLab-Assignment-1.git">erl1</ulink>:</para>
<para><itemizedlist>
<listitem><para>download codice sul desktop</para>
</listitem><listitem><para><bold>NUOVO PACKAGE</bold> armor msgs ``` catkin_create_pkg robocluedo_armor_msgs std_msgs armor_msgs std_srvs ```</para>
</listitem><listitem><para>senza perdere tempo, prima documentazione</para>
</listitem><listitem><para><bold>NUOVO PACKAGE</bold> armor ``` catkin_create_pkg robocluedo_armor roscpp rospy armor_msgs robocluedo_armor_msgs srd_msgs std_srvs ```</para>
</listitem><listitem><para>e prima documentazione anche qui senza perdere tempo</para>
</listitem><listitem><para>giusto per, proviamo a compilare, non si sa mai</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;armor packages setup&quot;</para>
</listitem><listitem><para>importazione del codice delle interfacce aRMOR<itemizedlist>
<listitem><para>(header) armor tools</para>
</listitem><listitem><para>(header) armor cluedo</para>
</listitem><listitem><para>(codice) armor tools e armor cluedo</para>
</listitem><listitem><para>(codice nodo) cluedo armor interface</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>il primo lavoro è quello di creare i messaggi da compilare, guardando che cosa richiede l&apos;interfaccia nodo armor<itemizedlist>
<listitem><para>AddHint srv</para>
</listitem><listitem><para>DiscardHypothesis srv</para>
</listitem><listitem><para>Hypothesis msg</para>
</listitem><listitem><para>FindConsistentHypotheses srv</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>compilaziione messaggi con catkin</para>
</listitem><listitem><para>ora devo &quot;solo&quot; aggiornare il codice C++ del nodo ROS e scrivere il catkin</para>
</listitem><listitem><para>ora mancano cose tipo ... la ontology ... e tutto il resto</para>
</listitem><listitem><para>selezione dei vecchi diagrammi UML riferiti ad aRMOR</para>
</listitem><listitem><para>prima di fare altro, proviamo a compilare ... OK! perfetto</para>
</listitem><listitem><para>e aggiornamento docs</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;armor package first re-adaptation&quot;</para>
</listitem><listitem><para>template per le pagine di documentazione con UML</para>
</listitem><listitem><para>nuovi diagrammi per aRMOR (quelli che ci sono sono sbagliati...)<itemizedlist>
<listitem><para>class diagram iniziale</para>
</listitem><listitem><para>vediamo se genera...</para>
</listitem><listitem><para>ho dovuto risolvere uno <emphasis>stupido problema di padding</emphasis>, vedi <computeroutput>skinparam Padding &lt;tot&gt;</computeroutput></para>
</listitem><listitem><para>per il momento ci accontentiamo di semplici blocchi</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>voglio provare un po&apos; la compilazione esterna di una libreria<itemizedlist>
<listitem><para>module testing dal vecchio modulo ... in quello del module testing</para>
</listitem><listitem><para>proviamo a compiare ... non va ```text CMake Error at /opt/ros/noetic/share/catkin/cmake/catkinConfig.cmake:83 (find_package): Could not find a package configuration file provided by &quot;armor_tools&quot; with any of the following names:</para>
<para>armor_toolsConfig.cmake armor_tools-config.cmake</para>
<para>Add the installation prefix of &quot;armor_tools&quot; to CMAKE_PREFIX_PATH or set &quot;armor_tools_DIR&quot; to a directory containing one of the above files. If &quot;armor_tools&quot; provides a separate development package or SDK, be sure it has been installed. Call Stack (most recent call first): ExperimentalRoboticsLab-Assignment-2/robocluedo_module_testing/CMakeLists.txt:10 (find_package)</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><verbatim>    -- Configuring incomplete, errors occurred!
    See also &quot;/root/ros_ws/build/CMakeFiles/CMakeOutput.log&quot;.
    See also &quot;/root/ros_ws/build/CMakeFiles/CMakeError.log&quot;.
    make: *** [Makefile:17330: cmake_check_build_system] Error 1
    Invoking &quot;make cmake_check_build_system&quot; failed
    ```
- *per usare le librerie di un package A in un package B basta riferirsi al package A nel package B*
- proviamo un po&apos; questo test, giusto per essere sicuri
    - questo ... OK (dopo qualche fortissima bestemmia ... prossima volta controlla anche i file inclusi)
        ```
        roslaunch robocluedo_module_testing test_armor.launch
        ```
    - questo ... OK (ci è voluto poco stavolta, per fortuna)
        ```
        roslaunch robocluedo_module_testing test_armor_tools.launch
        ```
</verbatim><itemizedlist>
<listitem><para>voglio un attimo documentare i test in UML, per avere sempre presenti come sono fatti</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;testing armor and first documentation&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md25">
<title>09/08/2022 –</title>
<para><itemizedlist>
<listitem><para>serve uno <emphasis>schema completo</emphasis> dell&apos;applicazione prima di iniziare<itemizedlist>
<listitem><para>components robocluedo rosplan (solo bozza)</para>
</listitem><listitem><para><emphasis>meglio lavorare in MD</emphasis> : nessuna tabulazione fastidiosa, è più facile lavorarci su</para>
</listitem><listitem><para>components armor<itemizedlist>
<listitem><para>(ricorda di usare l&apos;opzione <computeroutput>allow_mixing</computeroutput> all&apos;inizio del codice per poter usare diversi tipi di UML nello stesso schema)</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>component movement controller</para>
</listitem><listitem><para><bold>il mission manager non lo faccio adesso</bold> perchè è il nodo che va a &quot;legare&quot; tutte le parti dell&apos;architettura. quindi, meglio lasciarlo a quando avrò un&apos;idea chiara</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;uml arch first draft&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>ora, iniziamo a lavorare su rosplan:</para>
<para><itemizedlist>
<listitem><para><bold>NUOVO PACKAGE</bold> ```bash catkin_create_pkg robocluedo_rosplan_msgs std_msgs std_srvs diagnostic_msgs geometry_msgs nav_msgs rosplan_dispatch_msgs rosplan_knowledge_msgs ```</para>
</listitem><listitem><para>documentazione del package e prima configurazione (penso userò quello che ho fatto nella precedente versione, inutile reinventare chissà che)</para>
</listitem><listitem><para>e trasferimento dei messaggi nel nuovo package (copia incolla facile facile)<itemizedlist>
<listitem><para>e compilazione ... OK</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>NUOVO PACKAGE</bold> ```bash catkin_create_pkg robocluedo_rosplan roscpp rospy std_msgs std_srvs diagnostic_msgs rosplan_dispatch_msgs rosplan_knowledge_msgs rosplan_dependencies robocluedo_rosplan_msgs ```</para>
</listitem><listitem><para>e primo setup del package</para>
</listitem><listitem><para>compilazione da vuoto ... OK</para>
</listitem><listitem><para><bold>COMMIT</bold> : &quot;rosplan first setup&quot;</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>è il momento di rifare il PDDL</para>
<para><itemizedlist>
<listitem><para>iniziamo col prendere l&apos;environment dal precedente progetto</para>
</listitem><listitem><para>mi converrà progettare prima di fiondarmi sul codice...<itemizedlist>
<listitem><para>nuovo documento sul PDDL</para>
</listitem><listitem><para>una lista delle azioni PDDL e dei landmarks</para>
</listitem><listitem><para>(ho dovuto aggiornare l&apos;UML di robocluedo rosplan, mi serviva un componente che non avevo ancora menzionato)</para>
</listitem><listitem><para>(l&apos;idea è di fare il design dell&apos;intero PDDL sul documento, in modo da non dover fare due cose assieme, design e implementazione, nella fase di implementazione, <emphasis>perchè so quanto romperà il planner</emphasis>)</para>
</listitem><listitem><para>pddl delle varie azioni</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>e ora, implementazione<itemizedlist>
<listitem><para>prima versione <emphasis>completamente vuota</emphasis></para>
</listitem><listitem><para>parse ... OK (però bisogna vedere se fa il plan o no)</para>
</listitem><listitem><para>plan ... NO ... OK domain: ```lisp (define (domain robocluedo)</para>
<para>(:requirements ;; === PDDL1.1 === ;; :strips :typing :equality :existential-preconditions :universal-preconditions :conditional-effects :quantified-preconditions</para>
<para>;; === PDDL2.1 === ;; :numeric-fluents :durative-actions )</para>
<para>(:types ;; navigation system waypoint )</para>
<para>(:predicates (stub ) (not-stub ) )</para>
<para>(:functions</para>
<para>)</para>
<para>(:durative-action stub-true :parameters ( )</para>
<para>:duration (= ?duration 0.99 )</para>
<para>:condition (and (at start (not-stub )) )</para>
<para>:effect (and (at start (not (not-stub ))) (at end (stub)) ) )</para>
<para>) ``` problem: ```lisp (define (problem robocluedo-task)</para>
<para>(:domain robocluedo)</para>
<para>(:objects</para>
<para>)</para>
<para>(:init (not-stub ) )</para>
<para>(:goal (stub ))</para>
<para>) ``` plan (fino ad ora): ```text root@3b17871017fd:~/ros_ws/src/erl2-new/robocluedo_rosplan/pddl/robocluedo# ./solve_popf.sh Number of literals: 2 Constructing lookup tables: Post filtering unreachable actions: No analytic limits found, not considering limit effects of goal-only operators All the ground actions in this problem are compression-safe Initial heuristic = 1.000 ;;;; Solution Found ; States evaluated: 2 ; Cost: 0.990 ; Time 0.00 0.000: (stub-true) [0.990] ```</para>
</listitem><listitem><para>(ora, una sola azione alla volta)</para>
</listitem><listitem><para>replan<itemizedlist>
<listitem><para>importazione</para>
</listitem><listitem><para>parse ... OK</para>
</listitem><listitem><para>plan ... OK<itemizedlist>
<listitem><para><emphasis>precondition e effect richiedono comunque l&apos;operatore and, anche se hanno un solo predicato al loro interno</emphasis></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>uml del replan</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>move-to<itemizedlist>
<listitem><para>importazione<itemizedlist>
<listitem><para>meglio separare <computeroutput>move-to</computeroutput> dall&apos;ottenere l&apos;hint ... nuova azione <computeroutput>signal-collect-hint</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>parse ...</para>
</listitem><listitem><para>plan ...</para>
</listitem><listitem><para>uml dell&apos;azione implementata in ROS</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>signal-collect-hint<itemizedlist>
<listitem><para>importazione</para>
</listitem><listitem><para>parse ...</para>
</listitem><listitem><para>plan ... OK</para>
</listitem></itemizedlist>
</para>
<para>plan finora: ```text ; States evaluated: 14 ; Cost: 9.909 ; Time 0.00 0.000: (replan) [0.990] 0.991: (move-to center wp1) [0.990] 1.982: (signal-collect-hint wp1) [0.990] 2.973: (collect-hint wp1) [0.990] 3.964: (move-to wp1 wp2) [0.990] 4.955: (move-to wp2 wp3) [0.990] 5.946: (signal-collect-hint wp3) [0.990] 6.937: (collect-hint wp3) [0.990] 7.928: (move-to wp3 wp4) [0.990] 8.919: (signal-collect-hint wp4) [0.990] ``` per il goal ```lisp (:goal (and (not-dirty ) (at wp4 ) (hint-ready ) (hint-collected wp1) (hint-collected wp3 ))) ```<itemizedlist>
<listitem><para>uml</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>move to center<itemizedlist>
<listitem><para>importazione</para>
</listitem><listitem><para>solve</para>
</listitem></itemizedlist>
</para>
<para>ultimo output:</para>
<para>```text </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md__docs_dev-log_1autotoc_md28">
<title>./solve_popf.sh</title>
<para>Number of literals: 28 Constructing lookup tables: [10%] [20%] [30%] [40%] [50%] [60%] [70%] [80%] [90%] [100%] [110%] [120%] [130%] [140%] [150%] [160%] Post filtering unreachable actions: [10%] [20%] [30%] [40%] [50%] [60%] [70%] [80%] [90%] [100%] [110%] [120%] [130%] [140%] [150%] [160%] No analytic limits found, not considering limit effects of goal-only operators 93% of the ground temporal actions in this problem are compression-safe Initial heuristic = 8.000 b (7.000 | 0.990)b (6.000 | 0.990)b (5.000 | 2.972)b (4.000 | 5.945)b (3.000 | 6.936)b (2.000 | 7.927)b (1.000 | 8.918);;;; Solution Found ; States evaluated: 15 ; Cost: 9.909 ; Time 0.00 0.000: (replan) [0.990] 0.991: (move-to center wp1) [0.990] 1.982: (signal-collect-hint wp1) [0.990] 2.973: (collect-hint wp1) [0.990] 3.964: (move-to wp1 wp2) [0.990] 4.955: (move-to wp2 wp3) [0.990] 5.946: (signal-collect-hint wp3) [0.990] 6.937: (collect-hint wp3) [0.990] 7.928: (move-to wp3 wp4) [0.990] 8.919: (move-to-center wp4 center) [0.990] ```</para>
<para>per il goal:</para>
<para>```lisp (:goal (and (not-dirty ) (hint-collected wp1) (hint-collected wp3 ) (at-center ))) ```<itemizedlist>
<listitem><para><bold>COMMIT</bold> : &quot;working on PDDL (not yet finished)&quot;</para>
</listitem><listitem><para>ancora lavoro sul PDDL<itemizedlist>
<listitem><para>azione solve</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>ora chiariamo la questione dei landmark</para>
</listitem></itemizedlist>
</para>
<para>TODO</para>
<para><itemizedlist>
<listitem><para>rivedere la topologia del problema</para>
</listitem><listitem><para>implementazione di una funzionalità per fare un clear &quot;sicuro&quot; della ontology (quello di rosplan funziona maluccio)</para>
</listitem><listitem><para>spostare la documentazione di ROSplan nella nuova workspace di erl2</para>
</listitem><listitem><para>come settare un goal via codice da ROSplan?</para>
</listitem><listitem><para>rimuovere le immagini dalla documentazione del codice per armor</para>
</listitem><listitem><para>un branch per la documentazione Sphinx</para>
</listitem><listitem><para>e uno script per mettere online la documentazione sphinx &quot;senza sbattersi troppo&quot;</para>
</listitem><listitem><para>autenticazione SSH sul Docker di lavoro</para>
</listitem><listitem><para>approfondire UML armor</para>
</listitem></itemizedlist>
</para>
<para>NOTE</para>
<para><itemizedlist>
<listitem><para>la pagina di documentaizone del codice va assieme al codice, invece che in una cartella separata; penso sia meglio. </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
